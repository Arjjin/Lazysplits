// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LzsPipeProtoCpp.proto

#include "LzsPipeProtoCpp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace Lazysplits {
namespace Proto {
class CppMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CppMessage>
      _instance;
} _CppMessage_default_instance_;
class CsMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CsMessage>
      _instance;
} _CsMessage_default_instance_;
}  // namespace Proto
}  // namespace Lazysplits
namespace protobuf_LzsPipeProtoCpp_2eproto {
static void InitDefaultsCppMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lazysplits::Proto::_CppMessage_default_instance_;
    new (ptr) ::Lazysplits::Proto::CppMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Lazysplits::Proto::CppMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CppMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCppMessage}, {}};

static void InitDefaultsCsMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lazysplits::Proto::_CsMessage_default_instance_;
    new (ptr) ::Lazysplits::Proto::CsMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Lazysplits::Proto::CsMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CsMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCsMessage}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CppMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CsMessage.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CppMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CppMessage, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CppMessage, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CppMessage, shared_data_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CppMessage, game_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CppMessage, target_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CppMessage, target_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CppMessage, target_offset_ms_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CsMessage, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CsMessage, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CsMessage, shared_data_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CsMessage, game_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CsMessage, target_name_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Lazysplits::Proto::CppMessage)},
  { 12, -1, sizeof(::Lazysplits::Proto::CsMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Lazysplits::Proto::_CppMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Lazysplits::Proto::_CsMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "LzsPipeProtoCpp.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025LzsPipeProtoCpp.proto\022\020Lazysplits.Prot"
      "o\"\204\002\n\nCppMessage\022\n\n\002id\030\001 \001(\005\0226\n\004type\030\002 \001"
      "(\0162(.Lazysplits.Proto.CppMessage.Message"
      "Type\022\027\n\017shared_data_dir\030\003 \001(\t\022\021\n\tgame_na"
      "me\030\004 \001(\t\022\023\n\013target_name\030\005 \001(\r\022\030\n\020target_"
      "timestamp\030\006 \001(\004\022\030\n\020target_offset_ms\030\007 \001("
      "\004\"=\n\013MessageType\022\010\n\004NONE\020\000\022\022\n\016REQUEST_RE"
      "SYNC\020\001\022\020\n\014TARGET_FOUND\020\002\"\313\001\n\tCsMessage\022\n"
      "\n\002id\030\001 \001(\005\0225\n\004type\030\002 \001(\0162\'.Lazysplits.Pr"
      "oto.CsMessage.MessageType\022\027\n\017shared_data"
      "_dir\030\003 \001(\t\022\021\n\tgame_name\030\004 \001(\t\022\023\n\013target_"
      "name\030\005 \001(\t\":\n\013MessageType\022\010\n\004NONE\020\000\022\021\n\rC"
      "LEAR_TARGETS\020\001\022\016\n\nNEW_TARGET\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 518);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LzsPipeProtoCpp.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_LzsPipeProtoCpp_2eproto
namespace Lazysplits {
namespace Proto {
const ::google::protobuf::EnumDescriptor* CppMessage_MessageType_descriptor() {
  protobuf_LzsPipeProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LzsPipeProtoCpp_2eproto::file_level_enum_descriptors[0];
}
bool CppMessage_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CppMessage_MessageType CppMessage::NONE;
const CppMessage_MessageType CppMessage::REQUEST_RESYNC;
const CppMessage_MessageType CppMessage::TARGET_FOUND;
const CppMessage_MessageType CppMessage::MessageType_MIN;
const CppMessage_MessageType CppMessage::MessageType_MAX;
const int CppMessage::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CsMessage_MessageType_descriptor() {
  protobuf_LzsPipeProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LzsPipeProtoCpp_2eproto::file_level_enum_descriptors[1];
}
bool CsMessage_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CsMessage_MessageType CsMessage::NONE;
const CsMessage_MessageType CsMessage::CLEAR_TARGETS;
const CsMessage_MessageType CsMessage::NEW_TARGET;
const CsMessage_MessageType CsMessage::MessageType_MIN;
const CsMessage_MessageType CsMessage::MessageType_MAX;
const int CsMessage::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CppMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CppMessage::kIdFieldNumber;
const int CppMessage::kTypeFieldNumber;
const int CppMessage::kSharedDataDirFieldNumber;
const int CppMessage::kGameNameFieldNumber;
const int CppMessage::kTargetNameFieldNumber;
const int CppMessage::kTargetTimestampFieldNumber;
const int CppMessage::kTargetOffsetMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CppMessage::CppMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LzsPipeProtoCpp_2eproto::scc_info_CppMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lazysplits.Proto.CppMessage)
}
CppMessage::CppMessage(const CppMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shared_data_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.shared_data_dir().size() > 0) {
    shared_data_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shared_data_dir_);
  }
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.game_name().size() > 0) {
    game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_name_) -
    reinterpret_cast<char*>(&id_)) + sizeof(target_name_));
  // @@protoc_insertion_point(copy_constructor:Lazysplits.Proto.CppMessage)
}

void CppMessage::SharedCtor() {
  shared_data_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_name_) -
      reinterpret_cast<char*>(&id_)) + sizeof(target_name_));
}

CppMessage::~CppMessage() {
  // @@protoc_insertion_point(destructor:Lazysplits.Proto.CppMessage)
  SharedDtor();
}

void CppMessage::SharedDtor() {
  shared_data_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CppMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CppMessage::descriptor() {
  ::protobuf_LzsPipeProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsPipeProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CppMessage& CppMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LzsPipeProtoCpp_2eproto::scc_info_CppMessage.base);
  return *internal_default_instance();
}


void CppMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Lazysplits.Proto.CppMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shared_data_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_name_) -
      reinterpret_cast<char*>(&id_)) + sizeof(target_name_));
  _internal_metadata_.Clear();
}

bool CppMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Lazysplits.Proto.CppMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Lazysplits.Proto.CppMessage.MessageType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Lazysplits::Proto::CppMessage_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string shared_data_dir = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shared_data_dir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shared_data_dir().data(), static_cast<int>(this->shared_data_dir().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Lazysplits.Proto.CppMessage.shared_data_dir"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string game_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->game_name().data(), static_cast<int>(this->game_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Lazysplits.Proto.CppMessage.game_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 target_timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 target_offset_ms = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_offset_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Lazysplits.Proto.CppMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Lazysplits.Proto.CppMessage)
  return false;
#undef DO_
}

void CppMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Lazysplits.Proto.CppMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // .Lazysplits.Proto.CppMessage.MessageType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // string shared_data_dir = 3;
  if (this->shared_data_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shared_data_dir().data(), static_cast<int>(this->shared_data_dir().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CppMessage.shared_data_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->shared_data_dir(), output);
  }

  // string game_name = 4;
  if (this->game_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->game_name().data(), static_cast<int>(this->game_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CppMessage.game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->game_name(), output);
  }

  // uint32 target_name = 5;
  if (this->target_name() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->target_name(), output);
  }

  // uint64 target_timestamp = 6;
  if (this->target_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->target_timestamp(), output);
  }

  // uint64 target_offset_ms = 7;
  if (this->target_offset_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->target_offset_ms(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Lazysplits.Proto.CppMessage)
}

::google::protobuf::uint8* CppMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Lazysplits.Proto.CppMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // .Lazysplits.Proto.CppMessage.MessageType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // string shared_data_dir = 3;
  if (this->shared_data_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shared_data_dir().data(), static_cast<int>(this->shared_data_dir().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CppMessage.shared_data_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->shared_data_dir(), target);
  }

  // string game_name = 4;
  if (this->game_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->game_name().data(), static_cast<int>(this->game_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CppMessage.game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->game_name(), target);
  }

  // uint32 target_name = 5;
  if (this->target_name() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->target_name(), target);
  }

  // uint64 target_timestamp = 6;
  if (this->target_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->target_timestamp(), target);
  }

  // uint64 target_offset_ms = 7;
  if (this->target_offset_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->target_offset_ms(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lazysplits.Proto.CppMessage)
  return target;
}

size_t CppMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lazysplits.Proto.CppMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string shared_data_dir = 3;
  if (this->shared_data_dir().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shared_data_dir());
  }

  // string game_name = 4;
  if (this->game_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->game_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // .Lazysplits.Proto.CppMessage.MessageType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint64 target_timestamp = 6;
  if (this->target_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->target_timestamp());
  }

  // uint64 target_offset_ms = 7;
  if (this->target_offset_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->target_offset_ms());
  }

  // uint32 target_name = 5;
  if (this->target_name() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CppMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lazysplits.Proto.CppMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CppMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CppMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lazysplits.Proto.CppMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lazysplits.Proto.CppMessage)
    MergeFrom(*source);
  }
}

void CppMessage::MergeFrom(const CppMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lazysplits.Proto.CppMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shared_data_dir().size() > 0) {

    shared_data_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shared_data_dir_);
  }
  if (from.game_name().size() > 0) {

    game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.target_timestamp() != 0) {
    set_target_timestamp(from.target_timestamp());
  }
  if (from.target_offset_ms() != 0) {
    set_target_offset_ms(from.target_offset_ms());
  }
  if (from.target_name() != 0) {
    set_target_name(from.target_name());
  }
}

void CppMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lazysplits.Proto.CppMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CppMessage::CopyFrom(const CppMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lazysplits.Proto.CppMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CppMessage::IsInitialized() const {
  return true;
}

void CppMessage::Swap(CppMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CppMessage::InternalSwap(CppMessage* other) {
  using std::swap;
  shared_data_dir_.Swap(&other->shared_data_dir_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_name_.Swap(&other->game_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(target_timestamp_, other->target_timestamp_);
  swap(target_offset_ms_, other->target_offset_ms_);
  swap(target_name_, other->target_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CppMessage::GetMetadata() const {
  protobuf_LzsPipeProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsPipeProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CsMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CsMessage::kIdFieldNumber;
const int CsMessage::kTypeFieldNumber;
const int CsMessage::kSharedDataDirFieldNumber;
const int CsMessage::kGameNameFieldNumber;
const int CsMessage::kTargetNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CsMessage::CsMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LzsPipeProtoCpp_2eproto::scc_info_CsMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lazysplits.Proto.CsMessage)
}
CsMessage::CsMessage(const CsMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shared_data_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.shared_data_dir().size() > 0) {
    shared_data_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shared_data_dir_);
  }
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.game_name().size() > 0) {
    game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
  }
  target_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.target_name().size() > 0) {
    target_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Lazysplits.Proto.CsMessage)
}

void CsMessage::SharedCtor() {
  shared_data_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

CsMessage::~CsMessage() {
  // @@protoc_insertion_point(destructor:Lazysplits.Proto.CsMessage)
  SharedDtor();
}

void CsMessage::SharedDtor() {
  shared_data_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CsMessage::descriptor() {
  ::protobuf_LzsPipeProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsPipeProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CsMessage& CsMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LzsPipeProtoCpp_2eproto::scc_info_CsMessage.base);
  return *internal_default_instance();
}


void CsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Lazysplits.Proto.CsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shared_data_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool CsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Lazysplits.Proto.CsMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Lazysplits.Proto.CsMessage.MessageType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Lazysplits::Proto::CsMessage_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string shared_data_dir = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shared_data_dir()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->shared_data_dir().data(), static_cast<int>(this->shared_data_dir().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Lazysplits.Proto.CsMessage.shared_data_dir"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string game_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->game_name().data(), static_cast<int>(this->game_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Lazysplits.Proto.CsMessage.game_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string target_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target_name().data(), static_cast<int>(this->target_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Lazysplits.Proto.CsMessage.target_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Lazysplits.Proto.CsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Lazysplits.Proto.CsMessage)
  return false;
#undef DO_
}

void CsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Lazysplits.Proto.CsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // .Lazysplits.Proto.CsMessage.MessageType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // string shared_data_dir = 3;
  if (this->shared_data_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shared_data_dir().data(), static_cast<int>(this->shared_data_dir().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CsMessage.shared_data_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->shared_data_dir(), output);
  }

  // string game_name = 4;
  if (this->game_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->game_name().data(), static_cast<int>(this->game_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CsMessage.game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->game_name(), output);
  }

  // string target_name = 5;
  if (this->target_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_name().data(), static_cast<int>(this->target_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CsMessage.target_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->target_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Lazysplits.Proto.CsMessage)
}

::google::protobuf::uint8* CsMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Lazysplits.Proto.CsMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // .Lazysplits.Proto.CsMessage.MessageType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // string shared_data_dir = 3;
  if (this->shared_data_dir().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->shared_data_dir().data(), static_cast<int>(this->shared_data_dir().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CsMessage.shared_data_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->shared_data_dir(), target);
  }

  // string game_name = 4;
  if (this->game_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->game_name().data(), static_cast<int>(this->game_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CsMessage.game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->game_name(), target);
  }

  // string target_name = 5;
  if (this->target_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_name().data(), static_cast<int>(this->target_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CsMessage.target_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->target_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lazysplits.Proto.CsMessage)
  return target;
}

size_t CsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lazysplits.Proto.CsMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string shared_data_dir = 3;
  if (this->shared_data_dir().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shared_data_dir());
  }

  // string game_name = 4;
  if (this->game_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->game_name());
  }

  // string target_name = 5;
  if (this->target_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target_name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // .Lazysplits.Proto.CsMessage.MessageType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CsMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lazysplits.Proto.CsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CsMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CsMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lazysplits.Proto.CsMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lazysplits.Proto.CsMessage)
    MergeFrom(*source);
  }
}

void CsMessage::MergeFrom(const CsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lazysplits.Proto.CsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shared_data_dir().size() > 0) {

    shared_data_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shared_data_dir_);
  }
  if (from.game_name().size() > 0) {

    game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
  }
  if (from.target_name().size() > 0) {

    target_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void CsMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lazysplits.Proto.CsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CsMessage::CopyFrom(const CsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lazysplits.Proto.CsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CsMessage::IsInitialized() const {
  return true;
}

void CsMessage::Swap(CsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CsMessage::InternalSwap(CsMessage* other) {
  using std::swap;
  shared_data_dir_.Swap(&other->shared_data_dir_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  game_name_.Swap(&other->game_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_name_.Swap(&other->target_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CsMessage::GetMetadata() const {
  protobuf_LzsPipeProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsPipeProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Proto
}  // namespace Lazysplits
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Lazysplits::Proto::CppMessage* Arena::CreateMaybeMessage< ::Lazysplits::Proto::CppMessage >(Arena* arena) {
  return Arena::CreateInternal< ::Lazysplits::Proto::CppMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Lazysplits::Proto::CsMessage* Arena::CreateMaybeMessage< ::Lazysplits::Proto::CsMessage >(Arena* arena) {
  return Arena::CreateInternal< ::Lazysplits::Proto::CsMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
