// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CppMessage.proto

#ifndef PROTOBUF_CppMessage_2eproto__INCLUDED
#define PROTOBUF_CppMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace Lazysplits {
namespace Proto {
class CppMessage;
class CppMessageDefaultTypeInternal;
extern CppMessageDefaultTypeInternal _CppMessage_default_instance_;
}  // namespace Proto
}  // namespace Lazysplits

namespace Lazysplits {
namespace Proto {

namespace protobuf_CppMessage_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_CppMessage_2eproto

enum CppMessage_MessageType {
  CppMessage_MessageType_NONE = 0,
  CppMessage_MessageType_PIPE_INFO = 1,
  CppMessage_MessageType_REQUEST_CV_TARGET = 2,
  CppMessage_MessageType_TARGET_FOUND = 3,
  CppMessage_MessageType_CppMessage_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CppMessage_MessageType_CppMessage_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CppMessage_MessageType_IsValid(int value);
const CppMessage_MessageType CppMessage_MessageType_MessageType_MIN = CppMessage_MessageType_NONE;
const CppMessage_MessageType CppMessage_MessageType_MessageType_MAX = CppMessage_MessageType_TARGET_FOUND;
const int CppMessage_MessageType_MessageType_ARRAYSIZE = CppMessage_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CppMessage_MessageType_descriptor();
inline const ::std::string& CppMessage_MessageType_Name(CppMessage_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CppMessage_MessageType_descriptor(), value);
}
inline bool CppMessage_MessageType_Parse(
    const ::std::string& name, CppMessage_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CppMessage_MessageType>(
    CppMessage_MessageType_descriptor(), name, value);
}
// ===================================================================

class CppMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Lazysplits.Proto.CppMessage) */ {
 public:
  CppMessage();
  virtual ~CppMessage();

  CppMessage(const CppMessage& from);

  inline CppMessage& operator=(const CppMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CppMessage& default_instance();

  static inline const CppMessage* internal_default_instance() {
    return reinterpret_cast<const CppMessage*>(
               &_CppMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CppMessage* other);

  // implements Message ----------------------------------------------

  inline CppMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  CppMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CppMessage& from);
  void MergeFrom(const CppMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CppMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CppMessage_MessageType MessageType;
  static const MessageType NONE =
    CppMessage_MessageType_NONE;
  static const MessageType PIPE_INFO =
    CppMessage_MessageType_PIPE_INFO;
  static const MessageType REQUEST_CV_TARGET =
    CppMessage_MessageType_REQUEST_CV_TARGET;
  static const MessageType TARGET_FOUND =
    CppMessage_MessageType_TARGET_FOUND;
  static inline bool MessageType_IsValid(int value) {
    return CppMessage_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    CppMessage_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    CppMessage_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    CppMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return CppMessage_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return CppMessage_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return CppMessage_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 message_id = 1;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 1;
  ::google::protobuf::int32 message_id() const;
  void set_message_id(::google::protobuf::int32 value);

  // .Lazysplits.Proto.CppMessage.MessageType message_type = 2;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 2;
  ::Lazysplits::Proto::CppMessage_MessageType message_type() const;
  void set_message_type(::Lazysplits::Proto::CppMessage_MessageType value);

  // bool pipe_connected = 3;
  void clear_pipe_connected();
  static const int kPipeConnectedFieldNumber = 3;
  bool pipe_connected() const;
  void set_pipe_connected(bool value);

  // uint32 target_index = 4;
  void clear_target_index();
  static const int kTargetIndexFieldNumber = 4;
  ::google::protobuf::uint32 target_index() const;
  void set_target_index(::google::protobuf::uint32 value);

  // uint64 target_timestamp = 5;
  void clear_target_timestamp();
  static const int kTargetTimestampFieldNumber = 5;
  ::google::protobuf::uint64 target_timestamp() const;
  void set_target_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Lazysplits.Proto.CppMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 message_id_;
  int message_type_;
  bool pipe_connected_;
  ::google::protobuf::uint32 target_index_;
  ::google::protobuf::uint64 target_timestamp_;
  mutable int _cached_size_;
  friend struct protobuf_CppMessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CppMessage

// int32 message_id = 1;
inline void CppMessage::clear_message_id() {
  message_id_ = 0;
}
inline ::google::protobuf::int32 CppMessage::message_id() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CppMessage.message_id)
  return message_id_;
}
inline void CppMessage::set_message_id(::google::protobuf::int32 value) {
  
  message_id_ = value;
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CppMessage.message_id)
}

// .Lazysplits.Proto.CppMessage.MessageType message_type = 2;
inline void CppMessage::clear_message_type() {
  message_type_ = 0;
}
inline ::Lazysplits::Proto::CppMessage_MessageType CppMessage::message_type() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CppMessage.message_type)
  return static_cast< ::Lazysplits::Proto::CppMessage_MessageType >(message_type_);
}
inline void CppMessage::set_message_type(::Lazysplits::Proto::CppMessage_MessageType value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CppMessage.message_type)
}

// bool pipe_connected = 3;
inline void CppMessage::clear_pipe_connected() {
  pipe_connected_ = false;
}
inline bool CppMessage::pipe_connected() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CppMessage.pipe_connected)
  return pipe_connected_;
}
inline void CppMessage::set_pipe_connected(bool value) {
  
  pipe_connected_ = value;
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CppMessage.pipe_connected)
}

// uint32 target_index = 4;
inline void CppMessage::clear_target_index() {
  target_index_ = 0u;
}
inline ::google::protobuf::uint32 CppMessage::target_index() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CppMessage.target_index)
  return target_index_;
}
inline void CppMessage::set_target_index(::google::protobuf::uint32 value) {
  
  target_index_ = value;
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CppMessage.target_index)
}

// uint64 target_timestamp = 5;
inline void CppMessage::clear_target_timestamp() {
  target_timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CppMessage::target_timestamp() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CppMessage.target_timestamp)
  return target_timestamp_;
}
inline void CppMessage::set_target_timestamp(::google::protobuf::uint64 value) {
  
  target_timestamp_ = value;
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CppMessage.target_timestamp)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace Proto
}  // namespace Lazysplits

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Lazysplits::Proto::CppMessage_MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Lazysplits::Proto::CppMessage_MessageType>() {
  return ::Lazysplits::Proto::CppMessage_MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CppMessage_2eproto__INCLUDED
