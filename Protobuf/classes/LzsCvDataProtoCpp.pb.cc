// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LzsCvDataProtoCpp.proto

#include "LzsCvDataProtoCpp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_LzsCvDataProtoCpp_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_LzsCvDataProtoCpp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameInfo_TargetEntry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_LzsCvDataProtoCpp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameList_GameEntry;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_LzsCvDataProtoCpp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RGB;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_LzsCvDataProtoCpp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UScalar2d;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_LzsCvDataProtoCpp_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TargetInfo_WatchInfo_WatchArea;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_LzsCvDataProtoCpp_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TargetInfo_WatchInfo;
}  // namespace protobuf_LzsCvDataProtoCpp_2eproto
namespace Lazysplits {
namespace Proto {
namespace CvData {
class UScalar2dDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UScalar2d>
      _instance;
} _UScalar2d_default_instance_;
class RGBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RGB>
      _instance;
} _RGB_default_instance_;
class GameList_GameEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameList_GameEntry>
      _instance;
} _GameList_GameEntry_default_instance_;
class GameListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameList>
      _instance;
} _GameList_default_instance_;
class GameInfo_TargetEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameInfo_TargetEntry>
      _instance;
} _GameInfo_TargetEntry_default_instance_;
class GameInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameInfo>
      _instance;
} _GameInfo_default_instance_;
class TargetInfo_WatchInfo_WatchAreaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TargetInfo_WatchInfo_WatchArea>
      _instance;
} _TargetInfo_WatchInfo_WatchArea_default_instance_;
class TargetInfo_WatchInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TargetInfo_WatchInfo>
      _instance;
  const ::Lazysplits::Proto::CvData::RGB* color_;
  ::google::protobuf::internal::ArenaStringPtr img_rel_path_;
} _TargetInfo_WatchInfo_default_instance_;
class TargetInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TargetInfo>
      _instance;
} _TargetInfo_default_instance_;
}  // namespace CvData
}  // namespace Proto
}  // namespace Lazysplits
namespace protobuf_LzsCvDataProtoCpp_2eproto {
static void InitDefaultsUScalar2d() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lazysplits::Proto::CvData::_UScalar2d_default_instance_;
    new (ptr) ::Lazysplits::Proto::CvData::UScalar2d();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Lazysplits::Proto::CvData::UScalar2d::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UScalar2d =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUScalar2d}, {}};

static void InitDefaultsRGB() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lazysplits::Proto::CvData::_RGB_default_instance_;
    new (ptr) ::Lazysplits::Proto::CvData::RGB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Lazysplits::Proto::CvData::RGB::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RGB =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRGB}, {}};

static void InitDefaultsGameList_GameEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lazysplits::Proto::CvData::_GameList_GameEntry_default_instance_;
    new (ptr) ::Lazysplits::Proto::CvData::GameList_GameEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Lazysplits::Proto::CvData::GameList_GameEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameList_GameEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameList_GameEntry}, {}};

static void InitDefaultsGameList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lazysplits::Proto::CvData::_GameList_default_instance_;
    new (ptr) ::Lazysplits::Proto::CvData::GameList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Lazysplits::Proto::CvData::GameList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameList}, {
      &protobuf_LzsCvDataProtoCpp_2eproto::scc_info_GameList_GameEntry.base,}};

static void InitDefaultsGameInfo_TargetEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lazysplits::Proto::CvData::_GameInfo_TargetEntry_default_instance_;
    new (ptr) ::Lazysplits::Proto::CvData::GameInfo_TargetEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Lazysplits::Proto::CvData::GameInfo_TargetEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameInfo_TargetEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameInfo_TargetEntry}, {}};

static void InitDefaultsGameInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lazysplits::Proto::CvData::_GameInfo_default_instance_;
    new (ptr) ::Lazysplits::Proto::CvData::GameInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Lazysplits::Proto::CvData::GameInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameInfo}, {
      &protobuf_LzsCvDataProtoCpp_2eproto::scc_info_GameInfo_TargetEntry.base,}};

static void InitDefaultsTargetInfo_WatchInfo_WatchArea() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lazysplits::Proto::CvData::_TargetInfo_WatchInfo_WatchArea_default_instance_;
    new (ptr) ::Lazysplits::Proto::CvData::TargetInfo_WatchInfo_WatchArea();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Lazysplits::Proto::CvData::TargetInfo_WatchInfo_WatchArea::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TargetInfo_WatchInfo_WatchArea =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTargetInfo_WatchInfo_WatchArea}, {
      &protobuf_LzsCvDataProtoCpp_2eproto::scc_info_UScalar2d.base,}};

static void InitDefaultsTargetInfo_WatchInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lazysplits::Proto::CvData::_TargetInfo_WatchInfo_default_instance_;
    new (ptr) ::Lazysplits::Proto::CvData::TargetInfo_WatchInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Lazysplits::Proto::CvData::TargetInfo_WatchInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TargetInfo_WatchInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTargetInfo_WatchInfo}, {
      &protobuf_LzsCvDataProtoCpp_2eproto::scc_info_TargetInfo_WatchInfo_WatchArea.base,
      &protobuf_LzsCvDataProtoCpp_2eproto::scc_info_RGB.base,}};

static void InitDefaultsTargetInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Lazysplits::Proto::CvData::_TargetInfo_default_instance_;
    new (ptr) ::Lazysplits::Proto::CvData::TargetInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Lazysplits::Proto::CvData::TargetInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TargetInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTargetInfo}, {
      &protobuf_LzsCvDataProtoCpp_2eproto::scc_info_TargetInfo_WatchInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_UScalar2d.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RGB.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameList_GameEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameInfo_TargetEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TargetInfo_WatchInfo_WatchArea.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TargetInfo_WatchInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TargetInfo.base);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::UScalar2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::UScalar2d, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::UScalar2d, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::RGB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::RGB, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::RGB, g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::RGB, b_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::GameList_GameEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::GameList_GameEntry, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::GameList_GameEntry, dir_rel_path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::GameList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::GameList, games_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::GameInfo_TargetEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::GameInfo_TargetEntry, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::GameInfo_TargetEntry, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::GameInfo_TargetEntry, dir_rel_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::GameInfo_TargetEntry, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::GameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::GameInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::GameInfo, targets_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::TargetInfo_WatchInfo_WatchArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::TargetInfo_WatchInfo_WatchArea, loc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::TargetInfo_WatchInfo_WatchArea, size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::TargetInfo_WatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::TargetInfo_WatchInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::TargetInfo_WatchInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::TargetInfo_WatchInfo, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::TargetInfo_WatchInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::TargetInfo_WatchInfo, area_),
  offsetof(::Lazysplits::Proto::CvData::TargetInfo_WatchInfoDefaultTypeInternal, color_),
  offsetof(::Lazysplits::Proto::CvData::TargetInfo_WatchInfoDefaultTypeInternal, img_rel_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::TargetInfo_WatchInfo, watch_cv_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::TargetInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::TargetInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::TargetInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::TargetInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::TargetInfo, split_offset_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Lazysplits::Proto::CvData::TargetInfo, watches_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Lazysplits::Proto::CvData::UScalar2d)},
  { 7, -1, sizeof(::Lazysplits::Proto::CvData::RGB)},
  { 15, -1, sizeof(::Lazysplits::Proto::CvData::GameList_GameEntry)},
  { 22, -1, sizeof(::Lazysplits::Proto::CvData::GameList)},
  { 28, -1, sizeof(::Lazysplits::Proto::CvData::GameInfo_TargetEntry)},
  { 37, -1, sizeof(::Lazysplits::Proto::CvData::GameInfo)},
  { 44, -1, sizeof(::Lazysplits::Proto::CvData::TargetInfo_WatchInfo_WatchArea)},
  { 51, -1, sizeof(::Lazysplits::Proto::CvData::TargetInfo_WatchInfo)},
  { 63, -1, sizeof(::Lazysplits::Proto::CvData::TargetInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Lazysplits::Proto::CvData::_UScalar2d_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Lazysplits::Proto::CvData::_RGB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Lazysplits::Proto::CvData::_GameList_GameEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Lazysplits::Proto::CvData::_GameList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Lazysplits::Proto::CvData::_GameInfo_TargetEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Lazysplits::Proto::CvData::_GameInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Lazysplits::Proto::CvData::_TargetInfo_WatchInfo_WatchArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Lazysplits::Proto::CvData::_TargetInfo_WatchInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Lazysplits::Proto::CvData::_TargetInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "LzsCvDataProtoCpp.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027LzsCvDataProtoCpp.proto\022\027Lazysplits.Pr"
      "oto.CvData\"!\n\tUScalar2d\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030"
      "\002 \001(\r\"&\n\003RGB\022\t\n\001R\030\001 \001(\r\022\t\n\001G\030\002 \001(\r\022\t\n\001B\030"
      "\003 \001(\r\"w\n\010GameList\022:\n\005games\030\001 \003(\0132+.Lazys"
      "plits.Proto.CvData.GameList.GameEntry\032/\n"
      "\tGameEntry\022\014\n\004name\030\001 \001(\t\022\024\n\014dir_rel_path"
      "\030\002 \001(\t\"\312\001\n\010GameInfo\022\014\n\004name\030\001 \001(\t\022>\n\007tar"
      "gets\030\002 \003(\0132-.Lazysplits.Proto.CvData.Gam"
      "eInfo.TargetEntry\032p\n\013TargetEntry\022\n\n\002id\030\001"
      " \001(\005\022\014\n\004name\030\002 \001(\t\022\024\n\014dir_rel_path\030\003 \001(\t"
      "\0221\n\004type\030\004 \001(\0162#.Lazysplits.Proto.CvData"
      ".TargetType\"\234\004\n\nTargetInfo\022\n\n\002id\030\001 \001(\005\022\014"
      "\n\004name\030\002 \001(\t\0221\n\004type\030\003 \001(\0162#.Lazysplits."
      "Proto.CvData.TargetType\022\027\n\017split_offset_"
      "ms\030\004 \001(\021\022>\n\007watches\030\005 \003(\0132-.Lazysplits.P"
      "roto.CvData.TargetInfo.WatchInfo\032\347\002\n\tWat"
      "chInfo\022\n\n\002id\030\001 \001(\r\022\r\n\005index\030\002 \001(\r\0220\n\004typ"
      "e\030\003 \001(\0162\".Lazysplits.Proto.CvData.WatchT"
      "ype\022E\n\004area\030\004 \001(\01327.Lazysplits.Proto.CvD"
      "ata.TargetInfo.WatchInfo.WatchArea\022-\n\005co"
      "lor\030\005 \001(\0132\034.Lazysplits.Proto.CvData.RGBH"
      "\000\022\026\n\014img_rel_path\030\006 \001(\tH\000\032n\n\tWatchArea\022/"
      "\n\003loc\030\001 \001(\0132\".Lazysplits.Proto.CvData.US"
      "calar2d\0220\n\004size\030\002 \001(\0132\".Lazysplits.Proto"
      ".CvData.UScalar2dB\017\n\rwatch_cv_data*l\n\nTa"
      "rgetType\022\016\n\nTGT_UNUSED\020\000\022\r\n\tTGT_RESET\020\001\022"
      "\r\n\tTGT_START\020\002\022\020\n\014TGT_STANDARD\020\003\022\021\n\rTGT_"
      "GENERATOR\020\004\022\013\n\007TGT_END\020\005*C\n\tWatchType\022\023\n"
      "\017WT_UNUSED_WATCH\020\000\022\014\n\010WT_COLOR\020\001\022\023\n\017WT_I"
      "MAGE_STATIC\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1181);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LzsCvDataProtoCpp.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_LzsCvDataProtoCpp_2eproto
namespace Lazysplits {
namespace Proto {
namespace CvData {
const ::google::protobuf::EnumDescriptor* TargetType_descriptor() {
  protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LzsCvDataProtoCpp_2eproto::file_level_enum_descriptors[0];
}
bool TargetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WatchType_descriptor() {
  protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_LzsCvDataProtoCpp_2eproto::file_level_enum_descriptors[1];
}
bool WatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void UScalar2d::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UScalar2d::kXFieldNumber;
const int UScalar2d::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UScalar2d::UScalar2d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LzsCvDataProtoCpp_2eproto::scc_info_UScalar2d.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lazysplits.Proto.CvData.UScalar2d)
}
UScalar2d::UScalar2d(const UScalar2d& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Lazysplits.Proto.CvData.UScalar2d)
}

void UScalar2d::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

UScalar2d::~UScalar2d() {
  // @@protoc_insertion_point(destructor:Lazysplits.Proto.CvData.UScalar2d)
  SharedDtor();
}

void UScalar2d::SharedDtor() {
}

void UScalar2d::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UScalar2d::descriptor() {
  ::protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsCvDataProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UScalar2d& UScalar2d::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LzsCvDataProtoCpp_2eproto::scc_info_UScalar2d.base);
  return *internal_default_instance();
}


void UScalar2d::Clear() {
// @@protoc_insertion_point(message_clear_start:Lazysplits.Proto.CvData.UScalar2d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool UScalar2d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Lazysplits.Proto.CvData.UScalar2d)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Lazysplits.Proto.CvData.UScalar2d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Lazysplits.Proto.CvData.UScalar2d)
  return false;
#undef DO_
}

void UScalar2d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Lazysplits.Proto.CvData.UScalar2d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Lazysplits.Proto.CvData.UScalar2d)
}

::google::protobuf::uint8* UScalar2d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Lazysplits.Proto.CvData.UScalar2d)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lazysplits.Proto.CvData.UScalar2d)
  return target;
}

size_t UScalar2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lazysplits.Proto.CvData.UScalar2d)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UScalar2d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lazysplits.Proto.CvData.UScalar2d)
  GOOGLE_DCHECK_NE(&from, this);
  const UScalar2d* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UScalar2d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lazysplits.Proto.CvData.UScalar2d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lazysplits.Proto.CvData.UScalar2d)
    MergeFrom(*source);
  }
}

void UScalar2d::MergeFrom(const UScalar2d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lazysplits.Proto.CvData.UScalar2d)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void UScalar2d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lazysplits.Proto.CvData.UScalar2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UScalar2d::CopyFrom(const UScalar2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lazysplits.Proto.CvData.UScalar2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UScalar2d::IsInitialized() const {
  return true;
}

void UScalar2d::Swap(UScalar2d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UScalar2d::InternalSwap(UScalar2d* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UScalar2d::GetMetadata() const {
  protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsCvDataProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RGB::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RGB::kRFieldNumber;
const int RGB::kGFieldNumber;
const int RGB::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RGB::RGB()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LzsCvDataProtoCpp_2eproto::scc_info_RGB.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lazysplits.Proto.CvData.RGB)
}
RGB::RGB(const RGB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:Lazysplits.Proto.CvData.RGB)
}

void RGB::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&r_)) + sizeof(b_));
}

RGB::~RGB() {
  // @@protoc_insertion_point(destructor:Lazysplits.Proto.CvData.RGB)
  SharedDtor();
}

void RGB::SharedDtor() {
}

void RGB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RGB::descriptor() {
  ::protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsCvDataProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RGB& RGB::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LzsCvDataProtoCpp_2eproto::scc_info_RGB.base);
  return *internal_default_instance();
}


void RGB::Clear() {
// @@protoc_insertion_point(message_clear_start:Lazysplits.Proto.CvData.RGB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&r_)) + sizeof(b_));
  _internal_metadata_.Clear();
}

bool RGB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Lazysplits.Proto.CvData.RGB)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 R = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 G = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 B = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Lazysplits.Proto.CvData.RGB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Lazysplits.Proto.CvData.RGB)
  return false;
#undef DO_
}

void RGB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Lazysplits.Proto.CvData.RGB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 R = 1;
  if (this->r() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->r(), output);
  }

  // uint32 G = 2;
  if (this->g() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->g(), output);
  }

  // uint32 B = 3;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->b(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Lazysplits.Proto.CvData.RGB)
}

::google::protobuf::uint8* RGB::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Lazysplits.Proto.CvData.RGB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 R = 1;
  if (this->r() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->r(), target);
  }

  // uint32 G = 2;
  if (this->g() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->g(), target);
  }

  // uint32 B = 3;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->b(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lazysplits.Proto.CvData.RGB)
  return target;
}

size_t RGB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lazysplits.Proto.CvData.RGB)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 R = 1;
  if (this->r() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->r());
  }

  // uint32 G = 2;
  if (this->g() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->g());
  }

  // uint32 B = 3;
  if (this->b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->b());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RGB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lazysplits.Proto.CvData.RGB)
  GOOGLE_DCHECK_NE(&from, this);
  const RGB* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RGB>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lazysplits.Proto.CvData.RGB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lazysplits.Proto.CvData.RGB)
    MergeFrom(*source);
  }
}

void RGB::MergeFrom(const RGB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lazysplits.Proto.CvData.RGB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.r() != 0) {
    set_r(from.r());
  }
  if (from.g() != 0) {
    set_g(from.g());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
}

void RGB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lazysplits.Proto.CvData.RGB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RGB::CopyFrom(const RGB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lazysplits.Proto.CvData.RGB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RGB::IsInitialized() const {
  return true;
}

void RGB::Swap(RGB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RGB::InternalSwap(RGB* other) {
  using std::swap;
  swap(r_, other->r_);
  swap(g_, other->g_);
  swap(b_, other->b_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RGB::GetMetadata() const {
  protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsCvDataProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameList_GameEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameList_GameEntry::kNameFieldNumber;
const int GameList_GameEntry::kDirRelPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameList_GameEntry::GameList_GameEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LzsCvDataProtoCpp_2eproto::scc_info_GameList_GameEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lazysplits.Proto.CvData.GameList.GameEntry)
}
GameList_GameEntry::GameList_GameEntry(const GameList_GameEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  dir_rel_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dir_rel_path().size() > 0) {
    dir_rel_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dir_rel_path_);
  }
  // @@protoc_insertion_point(copy_constructor:Lazysplits.Proto.CvData.GameList.GameEntry)
}

void GameList_GameEntry::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_rel_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GameList_GameEntry::~GameList_GameEntry() {
  // @@protoc_insertion_point(destructor:Lazysplits.Proto.CvData.GameList.GameEntry)
  SharedDtor();
}

void GameList_GameEntry::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_rel_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameList_GameEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameList_GameEntry::descriptor() {
  ::protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsCvDataProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameList_GameEntry& GameList_GameEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LzsCvDataProtoCpp_2eproto::scc_info_GameList_GameEntry.base);
  return *internal_default_instance();
}


void GameList_GameEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:Lazysplits.Proto.CvData.GameList.GameEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_rel_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GameList_GameEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Lazysplits.Proto.CvData.GameList.GameEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Lazysplits.Proto.CvData.GameList.GameEntry.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dir_rel_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dir_rel_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dir_rel_path().data(), static_cast<int>(this->dir_rel_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Lazysplits.Proto.CvData.GameList.GameEntry.dir_rel_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Lazysplits.Proto.CvData.GameList.GameEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Lazysplits.Proto.CvData.GameList.GameEntry)
  return false;
#undef DO_
}

void GameList_GameEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Lazysplits.Proto.CvData.GameList.GameEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CvData.GameList.GameEntry.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string dir_rel_path = 2;
  if (this->dir_rel_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dir_rel_path().data(), static_cast<int>(this->dir_rel_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CvData.GameList.GameEntry.dir_rel_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dir_rel_path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Lazysplits.Proto.CvData.GameList.GameEntry)
}

::google::protobuf::uint8* GameList_GameEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Lazysplits.Proto.CvData.GameList.GameEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CvData.GameList.GameEntry.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string dir_rel_path = 2;
  if (this->dir_rel_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dir_rel_path().data(), static_cast<int>(this->dir_rel_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CvData.GameList.GameEntry.dir_rel_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dir_rel_path(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lazysplits.Proto.CvData.GameList.GameEntry)
  return target;
}

size_t GameList_GameEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lazysplits.Proto.CvData.GameList.GameEntry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string dir_rel_path = 2;
  if (this->dir_rel_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dir_rel_path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameList_GameEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lazysplits.Proto.CvData.GameList.GameEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const GameList_GameEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameList_GameEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lazysplits.Proto.CvData.GameList.GameEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lazysplits.Proto.CvData.GameList.GameEntry)
    MergeFrom(*source);
  }
}

void GameList_GameEntry::MergeFrom(const GameList_GameEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lazysplits.Proto.CvData.GameList.GameEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.dir_rel_path().size() > 0) {

    dir_rel_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dir_rel_path_);
  }
}

void GameList_GameEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lazysplits.Proto.CvData.GameList.GameEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameList_GameEntry::CopyFrom(const GameList_GameEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lazysplits.Proto.CvData.GameList.GameEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameList_GameEntry::IsInitialized() const {
  return true;
}

void GameList_GameEntry::Swap(GameList_GameEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameList_GameEntry::InternalSwap(GameList_GameEntry* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dir_rel_path_.Swap(&other->dir_rel_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameList_GameEntry::GetMetadata() const {
  protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsCvDataProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameList::kGamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameList::GameList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LzsCvDataProtoCpp_2eproto::scc_info_GameList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lazysplits.Proto.CvData.GameList)
}
GameList::GameList(const GameList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      games_(from.games_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Lazysplits.Proto.CvData.GameList)
}

void GameList::SharedCtor() {
}

GameList::~GameList() {
  // @@protoc_insertion_point(destructor:Lazysplits.Proto.CvData.GameList)
  SharedDtor();
}

void GameList::SharedDtor() {
}

void GameList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameList::descriptor() {
  ::protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsCvDataProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameList& GameList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LzsCvDataProtoCpp_2eproto::scc_info_GameList.base);
  return *internal_default_instance();
}


void GameList::Clear() {
// @@protoc_insertion_point(message_clear_start:Lazysplits.Proto.CvData.GameList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_.Clear();
  _internal_metadata_.Clear();
}

bool GameList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Lazysplits.Proto.CvData.GameList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Lazysplits.Proto.CvData.GameList.GameEntry games = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_games()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Lazysplits.Proto.CvData.GameList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Lazysplits.Proto.CvData.GameList)
  return false;
#undef DO_
}

void GameList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Lazysplits.Proto.CvData.GameList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Lazysplits.Proto.CvData.GameList.GameEntry games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->games_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->games(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Lazysplits.Proto.CvData.GameList)
}

::google::protobuf::uint8* GameList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Lazysplits.Proto.CvData.GameList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Lazysplits.Proto.CvData.GameList.GameEntry games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->games_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->games(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lazysplits.Proto.CvData.GameList)
  return target;
}

size_t GameList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lazysplits.Proto.CvData.GameList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Lazysplits.Proto.CvData.GameList.GameEntry games = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->games_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->games(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lazysplits.Proto.CvData.GameList)
  GOOGLE_DCHECK_NE(&from, this);
  const GameList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lazysplits.Proto.CvData.GameList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lazysplits.Proto.CvData.GameList)
    MergeFrom(*source);
  }
}

void GameList::MergeFrom(const GameList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lazysplits.Proto.CvData.GameList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_.MergeFrom(from.games_);
}

void GameList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lazysplits.Proto.CvData.GameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameList::CopyFrom(const GameList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lazysplits.Proto.CvData.GameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameList::IsInitialized() const {
  return true;
}

void GameList::Swap(GameList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameList::InternalSwap(GameList* other) {
  using std::swap;
  CastToBase(&games_)->InternalSwap(CastToBase(&other->games_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameList::GetMetadata() const {
  protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsCvDataProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameInfo_TargetEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameInfo_TargetEntry::kIdFieldNumber;
const int GameInfo_TargetEntry::kNameFieldNumber;
const int GameInfo_TargetEntry::kDirRelPathFieldNumber;
const int GameInfo_TargetEntry::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameInfo_TargetEntry::GameInfo_TargetEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LzsCvDataProtoCpp_2eproto::scc_info_GameInfo_TargetEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lazysplits.Proto.CvData.GameInfo.TargetEntry)
}
GameInfo_TargetEntry::GameInfo_TargetEntry(const GameInfo_TargetEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  dir_rel_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dir_rel_path().size() > 0) {
    dir_rel_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dir_rel_path_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Lazysplits.Proto.CvData.GameInfo.TargetEntry)
}

void GameInfo_TargetEntry::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_rel_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

GameInfo_TargetEntry::~GameInfo_TargetEntry() {
  // @@protoc_insertion_point(destructor:Lazysplits.Proto.CvData.GameInfo.TargetEntry)
  SharedDtor();
}

void GameInfo_TargetEntry::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_rel_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameInfo_TargetEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameInfo_TargetEntry::descriptor() {
  ::protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsCvDataProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameInfo_TargetEntry& GameInfo_TargetEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LzsCvDataProtoCpp_2eproto::scc_info_GameInfo_TargetEntry.base);
  return *internal_default_instance();
}


void GameInfo_TargetEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:Lazysplits.Proto.CvData.GameInfo.TargetEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_rel_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool GameInfo_TargetEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Lazysplits.Proto.CvData.GameInfo.TargetEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Lazysplits.Proto.CvData.GameInfo.TargetEntry.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dir_rel_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dir_rel_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dir_rel_path().data(), static_cast<int>(this->dir_rel_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Lazysplits.Proto.CvData.GameInfo.TargetEntry.dir_rel_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Lazysplits.Proto.CvData.TargetType type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Lazysplits::Proto::CvData::TargetType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Lazysplits.Proto.CvData.GameInfo.TargetEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Lazysplits.Proto.CvData.GameInfo.TargetEntry)
  return false;
#undef DO_
}

void GameInfo_TargetEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Lazysplits.Proto.CvData.GameInfo.TargetEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CvData.GameInfo.TargetEntry.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string dir_rel_path = 3;
  if (this->dir_rel_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dir_rel_path().data(), static_cast<int>(this->dir_rel_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CvData.GameInfo.TargetEntry.dir_rel_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dir_rel_path(), output);
  }

  // .Lazysplits.Proto.CvData.TargetType type = 4;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Lazysplits.Proto.CvData.GameInfo.TargetEntry)
}

::google::protobuf::uint8* GameInfo_TargetEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Lazysplits.Proto.CvData.GameInfo.TargetEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CvData.GameInfo.TargetEntry.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string dir_rel_path = 3;
  if (this->dir_rel_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dir_rel_path().data(), static_cast<int>(this->dir_rel_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CvData.GameInfo.TargetEntry.dir_rel_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dir_rel_path(), target);
  }

  // .Lazysplits.Proto.CvData.TargetType type = 4;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lazysplits.Proto.CvData.GameInfo.TargetEntry)
  return target;
}

size_t GameInfo_TargetEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lazysplits.Proto.CvData.GameInfo.TargetEntry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string dir_rel_path = 3;
  if (this->dir_rel_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dir_rel_path());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // .Lazysplits.Proto.CvData.TargetType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameInfo_TargetEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lazysplits.Proto.CvData.GameInfo.TargetEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInfo_TargetEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInfo_TargetEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lazysplits.Proto.CvData.GameInfo.TargetEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lazysplits.Proto.CvData.GameInfo.TargetEntry)
    MergeFrom(*source);
  }
}

void GameInfo_TargetEntry::MergeFrom(const GameInfo_TargetEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lazysplits.Proto.CvData.GameInfo.TargetEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.dir_rel_path().size() > 0) {

    dir_rel_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dir_rel_path_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void GameInfo_TargetEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lazysplits.Proto.CvData.GameInfo.TargetEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo_TargetEntry::CopyFrom(const GameInfo_TargetEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lazysplits.Proto.CvData.GameInfo.TargetEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo_TargetEntry::IsInitialized() const {
  return true;
}

void GameInfo_TargetEntry::Swap(GameInfo_TargetEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameInfo_TargetEntry::InternalSwap(GameInfo_TargetEntry* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dir_rel_path_.Swap(&other->dir_rel_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameInfo_TargetEntry::GetMetadata() const {
  protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsCvDataProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameInfo::kNameFieldNumber;
const int GameInfo::kTargetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameInfo::GameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LzsCvDataProtoCpp_2eproto::scc_info_GameInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lazysplits.Proto.CvData.GameInfo)
}
GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      targets_(from.targets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:Lazysplits.Proto.CvData.GameInfo)
}

void GameInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GameInfo::~GameInfo() {
  // @@protoc_insertion_point(destructor:Lazysplits.Proto.CvData.GameInfo)
  SharedDtor();
}

void GameInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameInfo::descriptor() {
  ::protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsCvDataProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameInfo& GameInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LzsCvDataProtoCpp_2eproto::scc_info_GameInfo.base);
  return *internal_default_instance();
}


void GameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Lazysplits.Proto.CvData.GameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targets_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Lazysplits.Proto.CvData.GameInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Lazysplits.Proto.CvData.GameInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Lazysplits.Proto.CvData.GameInfo.TargetEntry targets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_targets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Lazysplits.Proto.CvData.GameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Lazysplits.Proto.CvData.GameInfo)
  return false;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Lazysplits.Proto.CvData.GameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CvData.GameInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .Lazysplits.Proto.CvData.GameInfo.TargetEntry targets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->targets_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->targets(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Lazysplits.Proto.CvData.GameInfo)
}

::google::protobuf::uint8* GameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Lazysplits.Proto.CvData.GameInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CvData.GameInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .Lazysplits.Proto.CvData.GameInfo.TargetEntry targets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->targets_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->targets(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lazysplits.Proto.CvData.GameInfo)
  return target;
}

size_t GameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lazysplits.Proto.CvData.GameInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Lazysplits.Proto.CvData.GameInfo.TargetEntry targets = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->targets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->targets(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lazysplits.Proto.CvData.GameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lazysplits.Proto.CvData.GameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lazysplits.Proto.CvData.GameInfo)
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lazysplits.Proto.CvData.GameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targets_.MergeFrom(from.targets_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lazysplits.Proto.CvData.GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lazysplits.Proto.CvData.GameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {
  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameInfo::InternalSwap(GameInfo* other) {
  using std::swap;
  CastToBase(&targets_)->InternalSwap(CastToBase(&other->targets_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameInfo::GetMetadata() const {
  protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsCvDataProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TargetInfo_WatchInfo_WatchArea::InitAsDefaultInstance() {
  ::Lazysplits::Proto::CvData::_TargetInfo_WatchInfo_WatchArea_default_instance_._instance.get_mutable()->loc_ = const_cast< ::Lazysplits::Proto::CvData::UScalar2d*>(
      ::Lazysplits::Proto::CvData::UScalar2d::internal_default_instance());
  ::Lazysplits::Proto::CvData::_TargetInfo_WatchInfo_WatchArea_default_instance_._instance.get_mutable()->size_ = const_cast< ::Lazysplits::Proto::CvData::UScalar2d*>(
      ::Lazysplits::Proto::CvData::UScalar2d::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetInfo_WatchInfo_WatchArea::kLocFieldNumber;
const int TargetInfo_WatchInfo_WatchArea::kSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetInfo_WatchInfo_WatchArea::TargetInfo_WatchInfo_WatchArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LzsCvDataProtoCpp_2eproto::scc_info_TargetInfo_WatchInfo_WatchArea.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea)
}
TargetInfo_WatchInfo_WatchArea::TargetInfo_WatchInfo_WatchArea(const TargetInfo_WatchInfo_WatchArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_loc()) {
    loc_ = new ::Lazysplits::Proto::CvData::UScalar2d(*from.loc_);
  } else {
    loc_ = NULL;
  }
  if (from.has_size()) {
    size_ = new ::Lazysplits::Proto::CvData::UScalar2d(*from.size_);
  } else {
    size_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea)
}

void TargetInfo_WatchInfo_WatchArea::SharedCtor() {
  ::memset(&loc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&loc_)) + sizeof(size_));
}

TargetInfo_WatchInfo_WatchArea::~TargetInfo_WatchInfo_WatchArea() {
  // @@protoc_insertion_point(destructor:Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea)
  SharedDtor();
}

void TargetInfo_WatchInfo_WatchArea::SharedDtor() {
  if (this != internal_default_instance()) delete loc_;
  if (this != internal_default_instance()) delete size_;
}

void TargetInfo_WatchInfo_WatchArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TargetInfo_WatchInfo_WatchArea::descriptor() {
  ::protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsCvDataProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TargetInfo_WatchInfo_WatchArea& TargetInfo_WatchInfo_WatchArea::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LzsCvDataProtoCpp_2eproto::scc_info_TargetInfo_WatchInfo_WatchArea.base);
  return *internal_default_instance();
}


void TargetInfo_WatchInfo_WatchArea::Clear() {
// @@protoc_insertion_point(message_clear_start:Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && loc_ != NULL) {
    delete loc_;
  }
  loc_ = NULL;
  if (GetArenaNoVirtual() == NULL && size_ != NULL) {
    delete size_;
  }
  size_ = NULL;
  _internal_metadata_.Clear();
}

bool TargetInfo_WatchInfo_WatchArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Lazysplits.Proto.CvData.UScalar2d loc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_loc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Lazysplits.Proto.CvData.UScalar2d size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea)
  return false;
#undef DO_
}

void TargetInfo_WatchInfo_WatchArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Lazysplits.Proto.CvData.UScalar2d loc = 1;
  if (this->has_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_loc(), output);
  }

  // .Lazysplits.Proto.CvData.UScalar2d size = 2;
  if (this->has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea)
}

::google::protobuf::uint8* TargetInfo_WatchInfo_WatchArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Lazysplits.Proto.CvData.UScalar2d loc = 1;
  if (this->has_loc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_loc(), deterministic, target);
  }

  // .Lazysplits.Proto.CvData.UScalar2d size = 2;
  if (this->has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_size(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea)
  return target;
}

size_t TargetInfo_WatchInfo_WatchArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Lazysplits.Proto.CvData.UScalar2d loc = 1;
  if (this->has_loc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *loc_);
  }

  // .Lazysplits.Proto.CvData.UScalar2d size = 2;
  if (this->has_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *size_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetInfo_WatchInfo_WatchArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetInfo_WatchInfo_WatchArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetInfo_WatchInfo_WatchArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea)
    MergeFrom(*source);
  }
}

void TargetInfo_WatchInfo_WatchArea::MergeFrom(const TargetInfo_WatchInfo_WatchArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_loc()) {
    mutable_loc()->::Lazysplits::Proto::CvData::UScalar2d::MergeFrom(from.loc());
  }
  if (from.has_size()) {
    mutable_size()->::Lazysplits::Proto::CvData::UScalar2d::MergeFrom(from.size());
  }
}

void TargetInfo_WatchInfo_WatchArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetInfo_WatchInfo_WatchArea::CopyFrom(const TargetInfo_WatchInfo_WatchArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetInfo_WatchInfo_WatchArea::IsInitialized() const {
  return true;
}

void TargetInfo_WatchInfo_WatchArea::Swap(TargetInfo_WatchInfo_WatchArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetInfo_WatchInfo_WatchArea::InternalSwap(TargetInfo_WatchInfo_WatchArea* other) {
  using std::swap;
  swap(loc_, other->loc_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TargetInfo_WatchInfo_WatchArea::GetMetadata() const {
  protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsCvDataProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TargetInfo_WatchInfo::InitAsDefaultInstance() {
  ::Lazysplits::Proto::CvData::_TargetInfo_WatchInfo_default_instance_._instance.get_mutable()->area_ = const_cast< ::Lazysplits::Proto::CvData::TargetInfo_WatchInfo_WatchArea*>(
      ::Lazysplits::Proto::CvData::TargetInfo_WatchInfo_WatchArea::internal_default_instance());
  ::Lazysplits::Proto::CvData::_TargetInfo_WatchInfo_default_instance_.color_ = const_cast< ::Lazysplits::Proto::CvData::RGB*>(
      ::Lazysplits::Proto::CvData::RGB::internal_default_instance());
  ::Lazysplits::Proto::CvData::_TargetInfo_WatchInfo_default_instance_.img_rel_path_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TargetInfo_WatchInfo::set_allocated_color(::Lazysplits::Proto::CvData::RGB* color) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_watch_cv_data();
  if (color) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      color = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    set_has_color();
    watch_cv_data_.color_ = color;
  }
  // @@protoc_insertion_point(field_set_allocated:Lazysplits.Proto.CvData.TargetInfo.WatchInfo.color)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetInfo_WatchInfo::kIdFieldNumber;
const int TargetInfo_WatchInfo::kIndexFieldNumber;
const int TargetInfo_WatchInfo::kTypeFieldNumber;
const int TargetInfo_WatchInfo::kAreaFieldNumber;
const int TargetInfo_WatchInfo::kColorFieldNumber;
const int TargetInfo_WatchInfo::kImgRelPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetInfo_WatchInfo::TargetInfo_WatchInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LzsCvDataProtoCpp_2eproto::scc_info_TargetInfo_WatchInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lazysplits.Proto.CvData.TargetInfo.WatchInfo)
}
TargetInfo_WatchInfo::TargetInfo_WatchInfo(const TargetInfo_WatchInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_area()) {
    area_ = new ::Lazysplits::Proto::CvData::TargetInfo_WatchInfo_WatchArea(*from.area_);
  } else {
    area_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  clear_has_watch_cv_data();
  switch (from.watch_cv_data_case()) {
    case kColor: {
      mutable_color()->::Lazysplits::Proto::CvData::RGB::MergeFrom(from.color());
      break;
    }
    case kImgRelPath: {
      set_img_rel_path(from.img_rel_path());
      break;
    }
    case WATCH_CV_DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Lazysplits.Proto.CvData.TargetInfo.WatchInfo)
}

void TargetInfo_WatchInfo::SharedCtor() {
  ::memset(&area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&area_)) + sizeof(type_));
  clear_has_watch_cv_data();
}

TargetInfo_WatchInfo::~TargetInfo_WatchInfo() {
  // @@protoc_insertion_point(destructor:Lazysplits.Proto.CvData.TargetInfo.WatchInfo)
  SharedDtor();
}

void TargetInfo_WatchInfo::SharedDtor() {
  if (this != internal_default_instance()) delete area_;
  if (has_watch_cv_data()) {
    clear_watch_cv_data();
  }
}

void TargetInfo_WatchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TargetInfo_WatchInfo::descriptor() {
  ::protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsCvDataProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TargetInfo_WatchInfo& TargetInfo_WatchInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LzsCvDataProtoCpp_2eproto::scc_info_TargetInfo_WatchInfo.base);
  return *internal_default_instance();
}


void TargetInfo_WatchInfo::clear_watch_cv_data() {
// @@protoc_insertion_point(one_of_clear_start:Lazysplits.Proto.CvData.TargetInfo.WatchInfo)
  switch (watch_cv_data_case()) {
    case kColor: {
      delete watch_cv_data_.color_;
      break;
    }
    case kImgRelPath: {
      watch_cv_data_.img_rel_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case WATCH_CV_DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WATCH_CV_DATA_NOT_SET;
}


void TargetInfo_WatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Lazysplits.Proto.CvData.TargetInfo.WatchInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && area_ != NULL) {
    delete area_;
  }
  area_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  clear_watch_cv_data();
  _internal_metadata_.Clear();
}

bool TargetInfo_WatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Lazysplits.Proto.CvData.TargetInfo.WatchInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Lazysplits.Proto.CvData.WatchType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Lazysplits::Proto::CvData::WatchType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea area = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Lazysplits.Proto.CvData.RGB color = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string img_rel_path = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_img_rel_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->img_rel_path().data(), static_cast<int>(this->img_rel_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Lazysplits.Proto.CvData.TargetInfo.WatchInfo.img_rel_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Lazysplits.Proto.CvData.TargetInfo.WatchInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Lazysplits.Proto.CvData.TargetInfo.WatchInfo)
  return false;
#undef DO_
}

void TargetInfo_WatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Lazysplits.Proto.CvData.TargetInfo.WatchInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // .Lazysplits.Proto.CvData.WatchType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // .Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea area = 4;
  if (this->has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_area(), output);
  }

  // .Lazysplits.Proto.CvData.RGB color = 5;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_color(), output);
  }

  // string img_rel_path = 6;
  if (has_img_rel_path()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->img_rel_path().data(), static_cast<int>(this->img_rel_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CvData.TargetInfo.WatchInfo.img_rel_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->img_rel_path(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Lazysplits.Proto.CvData.TargetInfo.WatchInfo)
}

::google::protobuf::uint8* TargetInfo_WatchInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Lazysplits.Proto.CvData.TargetInfo.WatchInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // .Lazysplits.Proto.CvData.WatchType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // .Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea area = 4;
  if (this->has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_area(), deterministic, target);
  }

  // .Lazysplits.Proto.CvData.RGB color = 5;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_color(), deterministic, target);
  }

  // string img_rel_path = 6;
  if (has_img_rel_path()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->img_rel_path().data(), static_cast<int>(this->img_rel_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CvData.TargetInfo.WatchInfo.img_rel_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->img_rel_path(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lazysplits.Proto.CvData.TargetInfo.WatchInfo)
  return target;
}

size_t TargetInfo_WatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lazysplits.Proto.CvData.TargetInfo.WatchInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Lazysplits.Proto.CvData.TargetInfo.WatchInfo.WatchArea area = 4;
  if (this->has_area()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *area_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  // .Lazysplits.Proto.CvData.WatchType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (watch_cv_data_case()) {
    // .Lazysplits.Proto.CvData.RGB color = 5;
    case kColor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *watch_cv_data_.color_);
      break;
    }
    // string img_rel_path = 6;
    case kImgRelPath: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->img_rel_path());
      break;
    }
    case WATCH_CV_DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetInfo_WatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lazysplits.Proto.CvData.TargetInfo.WatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetInfo_WatchInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetInfo_WatchInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lazysplits.Proto.CvData.TargetInfo.WatchInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lazysplits.Proto.CvData.TargetInfo.WatchInfo)
    MergeFrom(*source);
  }
}

void TargetInfo_WatchInfo::MergeFrom(const TargetInfo_WatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lazysplits.Proto.CvData.TargetInfo.WatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_area()) {
    mutable_area()->::Lazysplits::Proto::CvData::TargetInfo_WatchInfo_WatchArea::MergeFrom(from.area());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.watch_cv_data_case()) {
    case kColor: {
      mutable_color()->::Lazysplits::Proto::CvData::RGB::MergeFrom(from.color());
      break;
    }
    case kImgRelPath: {
      set_img_rel_path(from.img_rel_path());
      break;
    }
    case WATCH_CV_DATA_NOT_SET: {
      break;
    }
  }
}

void TargetInfo_WatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lazysplits.Proto.CvData.TargetInfo.WatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetInfo_WatchInfo::CopyFrom(const TargetInfo_WatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lazysplits.Proto.CvData.TargetInfo.WatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetInfo_WatchInfo::IsInitialized() const {
  return true;
}

void TargetInfo_WatchInfo::Swap(TargetInfo_WatchInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetInfo_WatchInfo::InternalSwap(TargetInfo_WatchInfo* other) {
  using std::swap;
  swap(area_, other->area_);
  swap(id_, other->id_);
  swap(index_, other->index_);
  swap(type_, other->type_);
  swap(watch_cv_data_, other->watch_cv_data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TargetInfo_WatchInfo::GetMetadata() const {
  protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsCvDataProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TargetInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetInfo::kIdFieldNumber;
const int TargetInfo::kNameFieldNumber;
const int TargetInfo::kTypeFieldNumber;
const int TargetInfo::kSplitOffsetMsFieldNumber;
const int TargetInfo::kWatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetInfo::TargetInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_LzsCvDataProtoCpp_2eproto::scc_info_TargetInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lazysplits.Proto.CvData.TargetInfo)
}
TargetInfo::TargetInfo(const TargetInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      watches_(from.watches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&split_offset_ms_) -
    reinterpret_cast<char*>(&id_)) + sizeof(split_offset_ms_));
  // @@protoc_insertion_point(copy_constructor:Lazysplits.Proto.CvData.TargetInfo)
}

void TargetInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&split_offset_ms_) -
      reinterpret_cast<char*>(&id_)) + sizeof(split_offset_ms_));
}

TargetInfo::~TargetInfo() {
  // @@protoc_insertion_point(destructor:Lazysplits.Proto.CvData.TargetInfo)
  SharedDtor();
}

void TargetInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TargetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TargetInfo::descriptor() {
  ::protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsCvDataProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TargetInfo& TargetInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_LzsCvDataProtoCpp_2eproto::scc_info_TargetInfo.base);
  return *internal_default_instance();
}


void TargetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Lazysplits.Proto.CvData.TargetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  watches_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&split_offset_ms_) -
      reinterpret_cast<char*>(&id_)) + sizeof(split_offset_ms_));
  _internal_metadata_.Clear();
}

bool TargetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Lazysplits.Proto.CvData.TargetInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Lazysplits.Proto.CvData.TargetInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Lazysplits.Proto.CvData.TargetType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Lazysplits::Proto::CvData::TargetType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 split_offset_ms = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &split_offset_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Lazysplits.Proto.CvData.TargetInfo.WatchInfo watches = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_watches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Lazysplits.Proto.CvData.TargetInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Lazysplits.Proto.CvData.TargetInfo)
  return false;
#undef DO_
}

void TargetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Lazysplits.Proto.CvData.TargetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CvData.TargetInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .Lazysplits.Proto.CvData.TargetType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // sint32 split_offset_ms = 4;
  if (this->split_offset_ms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->split_offset_ms(), output);
  }

  // repeated .Lazysplits.Proto.CvData.TargetInfo.WatchInfo watches = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->watches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->watches(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Lazysplits.Proto.CvData.TargetInfo)
}

::google::protobuf::uint8* TargetInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Lazysplits.Proto.CvData.TargetInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Lazysplits.Proto.CvData.TargetInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .Lazysplits.Proto.CvData.TargetType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // sint32 split_offset_ms = 4;
  if (this->split_offset_ms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->split_offset_ms(), target);
  }

  // repeated .Lazysplits.Proto.CvData.TargetInfo.WatchInfo watches = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->watches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->watches(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Lazysplits.Proto.CvData.TargetInfo)
  return target;
}

size_t TargetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lazysplits.Proto.CvData.TargetInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Lazysplits.Proto.CvData.TargetInfo.WatchInfo watches = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->watches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->watches(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // .Lazysplits.Proto.CvData.TargetType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // sint32 split_offset_ms = 4;
  if (this->split_offset_ms() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->split_offset_ms());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lazysplits.Proto.CvData.TargetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TargetInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lazysplits.Proto.CvData.TargetInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lazysplits.Proto.CvData.TargetInfo)
    MergeFrom(*source);
  }
}

void TargetInfo::MergeFrom(const TargetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lazysplits.Proto.CvData.TargetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  watches_.MergeFrom(from.watches_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.split_offset_ms() != 0) {
    set_split_offset_ms(from.split_offset_ms());
  }
}

void TargetInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lazysplits.Proto.CvData.TargetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetInfo::CopyFrom(const TargetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lazysplits.Proto.CvData.TargetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetInfo::IsInitialized() const {
  return true;
}

void TargetInfo::Swap(TargetInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetInfo::InternalSwap(TargetInfo* other) {
  using std::swap;
  CastToBase(&watches_)->InternalSwap(CastToBase(&other->watches_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(split_offset_ms_, other->split_offset_ms_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TargetInfo::GetMetadata() const {
  protobuf_LzsCvDataProtoCpp_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_LzsCvDataProtoCpp_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace CvData
}  // namespace Proto
}  // namespace Lazysplits
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Lazysplits::Proto::CvData::UScalar2d* Arena::CreateMaybeMessage< ::Lazysplits::Proto::CvData::UScalar2d >(Arena* arena) {
  return Arena::CreateInternal< ::Lazysplits::Proto::CvData::UScalar2d >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Lazysplits::Proto::CvData::RGB* Arena::CreateMaybeMessage< ::Lazysplits::Proto::CvData::RGB >(Arena* arena) {
  return Arena::CreateInternal< ::Lazysplits::Proto::CvData::RGB >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Lazysplits::Proto::CvData::GameList_GameEntry* Arena::CreateMaybeMessage< ::Lazysplits::Proto::CvData::GameList_GameEntry >(Arena* arena) {
  return Arena::CreateInternal< ::Lazysplits::Proto::CvData::GameList_GameEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Lazysplits::Proto::CvData::GameList* Arena::CreateMaybeMessage< ::Lazysplits::Proto::CvData::GameList >(Arena* arena) {
  return Arena::CreateInternal< ::Lazysplits::Proto::CvData::GameList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Lazysplits::Proto::CvData::GameInfo_TargetEntry* Arena::CreateMaybeMessage< ::Lazysplits::Proto::CvData::GameInfo_TargetEntry >(Arena* arena) {
  return Arena::CreateInternal< ::Lazysplits::Proto::CvData::GameInfo_TargetEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Lazysplits::Proto::CvData::GameInfo* Arena::CreateMaybeMessage< ::Lazysplits::Proto::CvData::GameInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Lazysplits::Proto::CvData::GameInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Lazysplits::Proto::CvData::TargetInfo_WatchInfo_WatchArea* Arena::CreateMaybeMessage< ::Lazysplits::Proto::CvData::TargetInfo_WatchInfo_WatchArea >(Arena* arena) {
  return Arena::CreateInternal< ::Lazysplits::Proto::CvData::TargetInfo_WatchInfo_WatchArea >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Lazysplits::Proto::CvData::TargetInfo_WatchInfo* Arena::CreateMaybeMessage< ::Lazysplits::Proto::CvData::TargetInfo_WatchInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Lazysplits::Proto::CvData::TargetInfo_WatchInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Lazysplits::Proto::CvData::TargetInfo* Arena::CreateMaybeMessage< ::Lazysplits::Proto::CvData::TargetInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Lazysplits::Proto::CvData::TargetInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
