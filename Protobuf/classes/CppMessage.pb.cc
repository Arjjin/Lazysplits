// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CppMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CppMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Lazysplits {
namespace Proto {
class CppMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CppMessage> {
} _CppMessage_default_instance_;

namespace protobuf_CppMessage_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CppMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CppMessage, message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CppMessage, message_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CppMessage, pipe_connected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CppMessage, target_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CppMessage, target_timestamp_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(CppMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CppMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "CppMessage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _CppMessage_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CppMessage_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020CppMessage.proto\022\020Lazysplits.Proto\"\371\001\n"
      "\nCppMessage\022\022\n\nmessage_id\030\001 \001(\005\022>\n\014messa"
      "ge_type\030\002 \001(\0162(.Lazysplits.Proto.CppMess"
      "age.MessageType\022\026\n\016pipe_connected\030\003 \001(\010\022"
      "\024\n\014target_index\030\004 \001(\r\022\030\n\020target_timestam"
      "p\030\005 \001(\004\"O\n\013MessageType\022\010\n\004NONE\020\000\022\r\n\tPIPE"
      "_INFO\020\001\022\025\n\021REQUEST_CV_TARGET\020\002\022\020\n\014TARGET"
      "_FOUND\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 296);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CppMessage.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_CppMessage_2eproto

const ::google::protobuf::EnumDescriptor* CppMessage_MessageType_descriptor() {
  protobuf_CppMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CppMessage_2eproto::file_level_enum_descriptors[0];
}
bool CppMessage_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CppMessage_MessageType CppMessage::NONE;
const CppMessage_MessageType CppMessage::PIPE_INFO;
const CppMessage_MessageType CppMessage::REQUEST_CV_TARGET;
const CppMessage_MessageType CppMessage::TARGET_FOUND;
const CppMessage_MessageType CppMessage::MessageType_MIN;
const CppMessage_MessageType CppMessage::MessageType_MAX;
const int CppMessage::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CppMessage::kMessageIdFieldNumber;
const int CppMessage::kMessageTypeFieldNumber;
const int CppMessage::kPipeConnectedFieldNumber;
const int CppMessage::kTargetIndexFieldNumber;
const int CppMessage::kTargetTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CppMessage::CppMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CppMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Lazysplits.Proto.CppMessage)
}
CppMessage::CppMessage(const CppMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&message_id_, &from.message_id_,
    reinterpret_cast<char*>(&target_timestamp_) -
    reinterpret_cast<char*>(&message_id_) + sizeof(target_timestamp_));
  // @@protoc_insertion_point(copy_constructor:Lazysplits.Proto.CppMessage)
}

void CppMessage::SharedCtor() {
  ::memset(&message_id_, 0, reinterpret_cast<char*>(&target_timestamp_) -
    reinterpret_cast<char*>(&message_id_) + sizeof(target_timestamp_));
  _cached_size_ = 0;
}

CppMessage::~CppMessage() {
  // @@protoc_insertion_point(destructor:Lazysplits.Proto.CppMessage)
  SharedDtor();
}

void CppMessage::SharedDtor() {
}

void CppMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CppMessage::descriptor() {
  protobuf_CppMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CppMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CppMessage& CppMessage::default_instance() {
  protobuf_CppMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

CppMessage* CppMessage::New(::google::protobuf::Arena* arena) const {
  CppMessage* n = new CppMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CppMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Lazysplits.Proto.CppMessage)
  ::memset(&message_id_, 0, reinterpret_cast<char*>(&target_timestamp_) -
    reinterpret_cast<char*>(&message_id_) + sizeof(target_timestamp_));
}

bool CppMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Lazysplits.Proto.CppMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 message_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Lazysplits.Proto.CppMessage.MessageType message_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_message_type(static_cast< ::Lazysplits::Proto::CppMessage_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool pipe_connected = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pipe_connected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 target_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Lazysplits.Proto.CppMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Lazysplits.Proto.CppMessage)
  return false;
#undef DO_
}

void CppMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Lazysplits.Proto.CppMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 message_id = 1;
  if (this->message_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_id(), output);
  }

  // .Lazysplits.Proto.CppMessage.MessageType message_type = 2;
  if (this->message_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->message_type(), output);
  }

  // bool pipe_connected = 3;
  if (this->pipe_connected() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->pipe_connected(), output);
  }

  // uint32 target_index = 4;
  if (this->target_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->target_index(), output);
  }

  // uint64 target_timestamp = 5;
  if (this->target_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->target_timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:Lazysplits.Proto.CppMessage)
}

::google::protobuf::uint8* CppMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Lazysplits.Proto.CppMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 message_id = 1;
  if (this->message_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_id(), target);
  }

  // .Lazysplits.Proto.CppMessage.MessageType message_type = 2;
  if (this->message_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->message_type(), target);
  }

  // bool pipe_connected = 3;
  if (this->pipe_connected() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->pipe_connected(), target);
  }

  // uint32 target_index = 4;
  if (this->target_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->target_index(), target);
  }

  // uint64 target_timestamp = 5;
  if (this->target_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->target_timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Lazysplits.Proto.CppMessage)
  return target;
}

size_t CppMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Lazysplits.Proto.CppMessage)
  size_t total_size = 0;

  // int32 message_id = 1;
  if (this->message_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->message_id());
  }

  // .Lazysplits.Proto.CppMessage.MessageType message_type = 2;
  if (this->message_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type());
  }

  // bool pipe_connected = 3;
  if (this->pipe_connected() != 0) {
    total_size += 1 + 1;
  }

  // uint32 target_index = 4;
  if (this->target_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_index());
  }

  // uint64 target_timestamp = 5;
  if (this->target_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->target_timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CppMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Lazysplits.Proto.CppMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CppMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CppMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Lazysplits.Proto.CppMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Lazysplits.Proto.CppMessage)
    MergeFrom(*source);
  }
}

void CppMessage::MergeFrom(const CppMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Lazysplits.Proto.CppMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_id() != 0) {
    set_message_id(from.message_id());
  }
  if (from.message_type() != 0) {
    set_message_type(from.message_type());
  }
  if (from.pipe_connected() != 0) {
    set_pipe_connected(from.pipe_connected());
  }
  if (from.target_index() != 0) {
    set_target_index(from.target_index());
  }
  if (from.target_timestamp() != 0) {
    set_target_timestamp(from.target_timestamp());
  }
}

void CppMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Lazysplits.Proto.CppMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CppMessage::CopyFrom(const CppMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Lazysplits.Proto.CppMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CppMessage::IsInitialized() const {
  return true;
}

void CppMessage::Swap(CppMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CppMessage::InternalSwap(CppMessage* other) {
  std::swap(message_id_, other->message_id_);
  std::swap(message_type_, other->message_type_);
  std::swap(pipe_connected_, other->pipe_connected_);
  std::swap(target_index_, other->target_index_);
  std::swap(target_timestamp_, other->target_timestamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CppMessage::GetMetadata() const {
  protobuf_CppMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CppMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CppMessage

// int32 message_id = 1;
void CppMessage::clear_message_id() {
  message_id_ = 0;
}
::google::protobuf::int32 CppMessage::message_id() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CppMessage.message_id)
  return message_id_;
}
void CppMessage::set_message_id(::google::protobuf::int32 value) {
  
  message_id_ = value;
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CppMessage.message_id)
}

// .Lazysplits.Proto.CppMessage.MessageType message_type = 2;
void CppMessage::clear_message_type() {
  message_type_ = 0;
}
::Lazysplits::Proto::CppMessage_MessageType CppMessage::message_type() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CppMessage.message_type)
  return static_cast< ::Lazysplits::Proto::CppMessage_MessageType >(message_type_);
}
void CppMessage::set_message_type(::Lazysplits::Proto::CppMessage_MessageType value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CppMessage.message_type)
}

// bool pipe_connected = 3;
void CppMessage::clear_pipe_connected() {
  pipe_connected_ = false;
}
bool CppMessage::pipe_connected() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CppMessage.pipe_connected)
  return pipe_connected_;
}
void CppMessage::set_pipe_connected(bool value) {
  
  pipe_connected_ = value;
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CppMessage.pipe_connected)
}

// uint32 target_index = 4;
void CppMessage::clear_target_index() {
  target_index_ = 0u;
}
::google::protobuf::uint32 CppMessage::target_index() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CppMessage.target_index)
  return target_index_;
}
void CppMessage::set_target_index(::google::protobuf::uint32 value) {
  
  target_index_ = value;
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CppMessage.target_index)
}

// uint64 target_timestamp = 5;
void CppMessage::clear_target_timestamp() {
  target_timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CppMessage::target_timestamp() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CppMessage.target_timestamp)
  return target_timestamp_;
}
void CppMessage::set_target_timestamp(::google::protobuf::uint64 value) {
  
  target_timestamp_ = value;
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CppMessage.target_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Lazysplits

// @@protoc_insertion_point(global_scope)
