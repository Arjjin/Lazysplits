// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LzsPipeProtoCpp.proto

#ifndef PROTOBUF_INCLUDED_LzsPipeProtoCpp_2eproto
#define PROTOBUF_INCLUDED_LzsPipeProtoCpp_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_LzsPipeProtoCpp_2eproto 

namespace protobuf_LzsPipeProtoCpp_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_LzsPipeProtoCpp_2eproto
namespace Lazysplits {
namespace Proto {
class CppMessage;
class CppMessageDefaultTypeInternal;
extern CppMessageDefaultTypeInternal _CppMessage_default_instance_;
class CsMessage;
class CsMessageDefaultTypeInternal;
extern CsMessageDefaultTypeInternal _CsMessage_default_instance_;
class CsMessage_WatchVariable;
class CsMessage_WatchVariableDefaultTypeInternal;
extern CsMessage_WatchVariableDefaultTypeInternal _CsMessage_WatchVariable_default_instance_;
}  // namespace Proto
}  // namespace Lazysplits
namespace google {
namespace protobuf {
template<> ::Lazysplits::Proto::CppMessage* Arena::CreateMaybeMessage<::Lazysplits::Proto::CppMessage>(Arena*);
template<> ::Lazysplits::Proto::CsMessage* Arena::CreateMaybeMessage<::Lazysplits::Proto::CsMessage>(Arena*);
template<> ::Lazysplits::Proto::CsMessage_WatchVariable* Arena::CreateMaybeMessage<::Lazysplits::Proto::CsMessage_WatchVariable>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Lazysplits {
namespace Proto {

enum CppMessage_MessageType {
  CppMessage_MessageType_NONE = 0,
  CppMessage_MessageType_REQUEST_RESYNC = 1,
  CppMessage_MessageType_TARGET_FOUND = 2,
  CppMessage_MessageType_CppMessage_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CppMessage_MessageType_CppMessage_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CppMessage_MessageType_IsValid(int value);
const CppMessage_MessageType CppMessage_MessageType_MessageType_MIN = CppMessage_MessageType_NONE;
const CppMessage_MessageType CppMessage_MessageType_MessageType_MAX = CppMessage_MessageType_TARGET_FOUND;
const int CppMessage_MessageType_MessageType_ARRAYSIZE = CppMessage_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CppMessage_MessageType_descriptor();
inline const ::std::string& CppMessage_MessageType_Name(CppMessage_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CppMessage_MessageType_descriptor(), value);
}
inline bool CppMessage_MessageType_Parse(
    const ::std::string& name, CppMessage_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CppMessage_MessageType>(
    CppMessage_MessageType_descriptor(), name, value);
}
enum CsMessage_MessageType {
  CsMessage_MessageType_NONE = 0,
  CsMessage_MessageType_CLEAR_TARGETS = 1,
  CsMessage_MessageType_NEW_TARGET = 2,
  CsMessage_MessageType_CsMessage_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CsMessage_MessageType_CsMessage_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CsMessage_MessageType_IsValid(int value);
const CsMessage_MessageType CsMessage_MessageType_MessageType_MIN = CsMessage_MessageType_NONE;
const CsMessage_MessageType CsMessage_MessageType_MessageType_MAX = CsMessage_MessageType_NEW_TARGET;
const int CsMessage_MessageType_MessageType_ARRAYSIZE = CsMessage_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CsMessage_MessageType_descriptor();
inline const ::std::string& CsMessage_MessageType_Name(CsMessage_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CsMessage_MessageType_descriptor(), value);
}
inline bool CsMessage_MessageType_Parse(
    const ::std::string& name, CsMessage_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CsMessage_MessageType>(
    CsMessage_MessageType_descriptor(), name, value);
}
// ===================================================================

class CppMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Lazysplits.Proto.CppMessage) */ {
 public:
  CppMessage();
  virtual ~CppMessage();

  CppMessage(const CppMessage& from);

  inline CppMessage& operator=(const CppMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CppMessage(CppMessage&& from) noexcept
    : CppMessage() {
    *this = ::std::move(from);
  }

  inline CppMessage& operator=(CppMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CppMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CppMessage* internal_default_instance() {
    return reinterpret_cast<const CppMessage*>(
               &_CppMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CppMessage* other);
  friend void swap(CppMessage& a, CppMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CppMessage* New() const final {
    return CreateMaybeMessage<CppMessage>(NULL);
  }

  CppMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CppMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CppMessage& from);
  void MergeFrom(const CppMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CppMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CppMessage_MessageType MessageType;
  static const MessageType NONE =
    CppMessage_MessageType_NONE;
  static const MessageType REQUEST_RESYNC =
    CppMessage_MessageType_REQUEST_RESYNC;
  static const MessageType TARGET_FOUND =
    CppMessage_MessageType_TARGET_FOUND;
  static inline bool MessageType_IsValid(int value) {
    return CppMessage_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    CppMessage_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    CppMessage_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    CppMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return CppMessage_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return CppMessage_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return CppMessage_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string shared_data_dir = 3;
  void clear_shared_data_dir();
  static const int kSharedDataDirFieldNumber = 3;
  const ::std::string& shared_data_dir() const;
  void set_shared_data_dir(const ::std::string& value);
  #if LANG_CXX11
  void set_shared_data_dir(::std::string&& value);
  #endif
  void set_shared_data_dir(const char* value);
  void set_shared_data_dir(const char* value, size_t size);
  ::std::string* mutable_shared_data_dir();
  ::std::string* release_shared_data_dir();
  void set_allocated_shared_data_dir(::std::string* shared_data_dir);

  // string game_name = 4;
  void clear_game_name();
  static const int kGameNameFieldNumber = 4;
  const ::std::string& game_name() const;
  void set_game_name(const ::std::string& value);
  #if LANG_CXX11
  void set_game_name(::std::string&& value);
  #endif
  void set_game_name(const char* value);
  void set_game_name(const char* value, size_t size);
  ::std::string* mutable_game_name();
  ::std::string* release_game_name();
  void set_allocated_game_name(::std::string* game_name);

  // string target_name = 5;
  void clear_target_name();
  static const int kTargetNameFieldNumber = 5;
  const ::std::string& target_name() const;
  void set_target_name(const ::std::string& value);
  #if LANG_CXX11
  void set_target_name(::std::string&& value);
  #endif
  void set_target_name(const char* value);
  void set_target_name(const char* value, size_t size);
  ::std::string* mutable_target_name();
  ::std::string* release_target_name();
  void set_allocated_target_name(::std::string* target_name);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // .Lazysplits.Proto.CppMessage.MessageType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::Lazysplits::Proto::CppMessage_MessageType type() const;
  void set_type(::Lazysplits::Proto::CppMessage_MessageType value);

  // uint64 target_timestamp = 6;
  void clear_target_timestamp();
  static const int kTargetTimestampFieldNumber = 6;
  ::google::protobuf::uint64 target_timestamp() const;
  void set_target_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Lazysplits.Proto.CppMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr shared_data_dir_;
  ::google::protobuf::internal::ArenaStringPtr game_name_;
  ::google::protobuf::internal::ArenaStringPtr target_name_;
  ::google::protobuf::int32 id_;
  int type_;
  ::google::protobuf::uint64 target_timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LzsPipeProtoCpp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CsMessage_WatchVariable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Lazysplits.Proto.CsMessage.WatchVariable) */ {
 public:
  CsMessage_WatchVariable();
  virtual ~CsMessage_WatchVariable();

  CsMessage_WatchVariable(const CsMessage_WatchVariable& from);

  inline CsMessage_WatchVariable& operator=(const CsMessage_WatchVariable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CsMessage_WatchVariable(CsMessage_WatchVariable&& from) noexcept
    : CsMessage_WatchVariable() {
    *this = ::std::move(from);
  }

  inline CsMessage_WatchVariable& operator=(CsMessage_WatchVariable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CsMessage_WatchVariable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CsMessage_WatchVariable* internal_default_instance() {
    return reinterpret_cast<const CsMessage_WatchVariable*>(
               &_CsMessage_WatchVariable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CsMessage_WatchVariable* other);
  friend void swap(CsMessage_WatchVariable& a, CsMessage_WatchVariable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CsMessage_WatchVariable* New() const final {
    return CreateMaybeMessage<CsMessage_WatchVariable>(NULL);
  }

  CsMessage_WatchVariable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CsMessage_WatchVariable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CsMessage_WatchVariable& from);
  void MergeFrom(const CsMessage_WatchVariable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsMessage_WatchVariable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:Lazysplits.Proto.CsMessage.WatchVariable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LzsPipeProtoCpp_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CsMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Lazysplits.Proto.CsMessage) */ {
 public:
  CsMessage();
  virtual ~CsMessage();

  CsMessage(const CsMessage& from);

  inline CsMessage& operator=(const CsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CsMessage(CsMessage&& from) noexcept
    : CsMessage() {
    *this = ::std::move(from);
  }

  inline CsMessage& operator=(CsMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CsMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CsMessage* internal_default_instance() {
    return reinterpret_cast<const CsMessage*>(
               &_CsMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CsMessage* other);
  friend void swap(CsMessage& a, CsMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CsMessage* New() const final {
    return CreateMaybeMessage<CsMessage>(NULL);
  }

  CsMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CsMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CsMessage& from);
  void MergeFrom(const CsMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CsMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CsMessage_WatchVariable WatchVariable;

  typedef CsMessage_MessageType MessageType;
  static const MessageType NONE =
    CsMessage_MessageType_NONE;
  static const MessageType CLEAR_TARGETS =
    CsMessage_MessageType_CLEAR_TARGETS;
  static const MessageType NEW_TARGET =
    CsMessage_MessageType_NEW_TARGET;
  static inline bool MessageType_IsValid(int value) {
    return CsMessage_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    CsMessage_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    CsMessage_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    CsMessage_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return CsMessage_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return CsMessage_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return CsMessage_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Lazysplits.Proto.CsMessage.WatchVariable watch_variables = 6;
  int watch_variables_size() const;
  void clear_watch_variables();
  static const int kWatchVariablesFieldNumber = 6;
  ::Lazysplits::Proto::CsMessage_WatchVariable* mutable_watch_variables(int index);
  ::google::protobuf::RepeatedPtrField< ::Lazysplits::Proto::CsMessage_WatchVariable >*
      mutable_watch_variables();
  const ::Lazysplits::Proto::CsMessage_WatchVariable& watch_variables(int index) const;
  ::Lazysplits::Proto::CsMessage_WatchVariable* add_watch_variables();
  const ::google::protobuf::RepeatedPtrField< ::Lazysplits::Proto::CsMessage_WatchVariable >&
      watch_variables() const;

  // string shared_data_dir = 3;
  void clear_shared_data_dir();
  static const int kSharedDataDirFieldNumber = 3;
  const ::std::string& shared_data_dir() const;
  void set_shared_data_dir(const ::std::string& value);
  #if LANG_CXX11
  void set_shared_data_dir(::std::string&& value);
  #endif
  void set_shared_data_dir(const char* value);
  void set_shared_data_dir(const char* value, size_t size);
  ::std::string* mutable_shared_data_dir();
  ::std::string* release_shared_data_dir();
  void set_allocated_shared_data_dir(::std::string* shared_data_dir);

  // string game_name = 4;
  void clear_game_name();
  static const int kGameNameFieldNumber = 4;
  const ::std::string& game_name() const;
  void set_game_name(const ::std::string& value);
  #if LANG_CXX11
  void set_game_name(::std::string&& value);
  #endif
  void set_game_name(const char* value);
  void set_game_name(const char* value, size_t size);
  ::std::string* mutable_game_name();
  ::std::string* release_game_name();
  void set_allocated_game_name(::std::string* game_name);

  // string target_name = 5;
  void clear_target_name();
  static const int kTargetNameFieldNumber = 5;
  const ::std::string& target_name() const;
  void set_target_name(const ::std::string& value);
  #if LANG_CXX11
  void set_target_name(::std::string&& value);
  #endif
  void set_target_name(const char* value);
  void set_target_name(const char* value, size_t size);
  ::std::string* mutable_target_name();
  ::std::string* release_target_name();
  void set_allocated_target_name(::std::string* target_name);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // .Lazysplits.Proto.CsMessage.MessageType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::Lazysplits::Proto::CsMessage_MessageType type() const;
  void set_type(::Lazysplits::Proto::CsMessage_MessageType value);

  // @@protoc_insertion_point(class_scope:Lazysplits.Proto.CsMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Lazysplits::Proto::CsMessage_WatchVariable > watch_variables_;
  ::google::protobuf::internal::ArenaStringPtr shared_data_dir_;
  ::google::protobuf::internal::ArenaStringPtr game_name_;
  ::google::protobuf::internal::ArenaStringPtr target_name_;
  ::google::protobuf::int32 id_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LzsPipeProtoCpp_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CppMessage

// int32 id = 1;
inline void CppMessage::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 CppMessage::id() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CppMessage.id)
  return id_;
}
inline void CppMessage::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CppMessage.id)
}

// .Lazysplits.Proto.CppMessage.MessageType type = 2;
inline void CppMessage::clear_type() {
  type_ = 0;
}
inline ::Lazysplits::Proto::CppMessage_MessageType CppMessage::type() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CppMessage.type)
  return static_cast< ::Lazysplits::Proto::CppMessage_MessageType >(type_);
}
inline void CppMessage::set_type(::Lazysplits::Proto::CppMessage_MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CppMessage.type)
}

// string shared_data_dir = 3;
inline void CppMessage::clear_shared_data_dir() {
  shared_data_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CppMessage::shared_data_dir() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CppMessage.shared_data_dir)
  return shared_data_dir_.GetNoArena();
}
inline void CppMessage::set_shared_data_dir(const ::std::string& value) {
  
  shared_data_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CppMessage.shared_data_dir)
}
#if LANG_CXX11
inline void CppMessage::set_shared_data_dir(::std::string&& value) {
  
  shared_data_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lazysplits.Proto.CppMessage.shared_data_dir)
}
#endif
inline void CppMessage::set_shared_data_dir(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  shared_data_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lazysplits.Proto.CppMessage.shared_data_dir)
}
inline void CppMessage::set_shared_data_dir(const char* value, size_t size) {
  
  shared_data_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lazysplits.Proto.CppMessage.shared_data_dir)
}
inline ::std::string* CppMessage::mutable_shared_data_dir() {
  
  // @@protoc_insertion_point(field_mutable:Lazysplits.Proto.CppMessage.shared_data_dir)
  return shared_data_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CppMessage::release_shared_data_dir() {
  // @@protoc_insertion_point(field_release:Lazysplits.Proto.CppMessage.shared_data_dir)
  
  return shared_data_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CppMessage::set_allocated_shared_data_dir(::std::string* shared_data_dir) {
  if (shared_data_dir != NULL) {
    
  } else {
    
  }
  shared_data_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shared_data_dir);
  // @@protoc_insertion_point(field_set_allocated:Lazysplits.Proto.CppMessage.shared_data_dir)
}

// string game_name = 4;
inline void CppMessage::clear_game_name() {
  game_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CppMessage::game_name() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CppMessage.game_name)
  return game_name_.GetNoArena();
}
inline void CppMessage::set_game_name(const ::std::string& value) {
  
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CppMessage.game_name)
}
#if LANG_CXX11
inline void CppMessage::set_game_name(::std::string&& value) {
  
  game_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lazysplits.Proto.CppMessage.game_name)
}
#endif
inline void CppMessage::set_game_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lazysplits.Proto.CppMessage.game_name)
}
inline void CppMessage::set_game_name(const char* value, size_t size) {
  
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lazysplits.Proto.CppMessage.game_name)
}
inline ::std::string* CppMessage::mutable_game_name() {
  
  // @@protoc_insertion_point(field_mutable:Lazysplits.Proto.CppMessage.game_name)
  return game_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CppMessage::release_game_name() {
  // @@protoc_insertion_point(field_release:Lazysplits.Proto.CppMessage.game_name)
  
  return game_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CppMessage::set_allocated_game_name(::std::string* game_name) {
  if (game_name != NULL) {
    
  } else {
    
  }
  game_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_name);
  // @@protoc_insertion_point(field_set_allocated:Lazysplits.Proto.CppMessage.game_name)
}

// string target_name = 5;
inline void CppMessage::clear_target_name() {
  target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CppMessage::target_name() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CppMessage.target_name)
  return target_name_.GetNoArena();
}
inline void CppMessage::set_target_name(const ::std::string& value) {
  
  target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CppMessage.target_name)
}
#if LANG_CXX11
inline void CppMessage::set_target_name(::std::string&& value) {
  
  target_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lazysplits.Proto.CppMessage.target_name)
}
#endif
inline void CppMessage::set_target_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lazysplits.Proto.CppMessage.target_name)
}
inline void CppMessage::set_target_name(const char* value, size_t size) {
  
  target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lazysplits.Proto.CppMessage.target_name)
}
inline ::std::string* CppMessage::mutable_target_name() {
  
  // @@protoc_insertion_point(field_mutable:Lazysplits.Proto.CppMessage.target_name)
  return target_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CppMessage::release_target_name() {
  // @@protoc_insertion_point(field_release:Lazysplits.Proto.CppMessage.target_name)
  
  return target_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CppMessage::set_allocated_target_name(::std::string* target_name) {
  if (target_name != NULL) {
    
  } else {
    
  }
  target_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_name);
  // @@protoc_insertion_point(field_set_allocated:Lazysplits.Proto.CppMessage.target_name)
}

// uint64 target_timestamp = 6;
inline void CppMessage::clear_target_timestamp() {
  target_timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CppMessage::target_timestamp() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CppMessage.target_timestamp)
  return target_timestamp_;
}
inline void CppMessage::set_target_timestamp(::google::protobuf::uint64 value) {
  
  target_timestamp_ = value;
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CppMessage.target_timestamp)
}

// -------------------------------------------------------------------

// CsMessage_WatchVariable

// string name = 1;
inline void CsMessage_WatchVariable::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CsMessage_WatchVariable::name() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CsMessage.WatchVariable.name)
  return name_.GetNoArena();
}
inline void CsMessage_WatchVariable::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CsMessage.WatchVariable.name)
}
#if LANG_CXX11
inline void CsMessage_WatchVariable::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lazysplits.Proto.CsMessage.WatchVariable.name)
}
#endif
inline void CsMessage_WatchVariable::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lazysplits.Proto.CsMessage.WatchVariable.name)
}
inline void CsMessage_WatchVariable::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lazysplits.Proto.CsMessage.WatchVariable.name)
}
inline ::std::string* CsMessage_WatchVariable::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Lazysplits.Proto.CsMessage.WatchVariable.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CsMessage_WatchVariable::release_name() {
  // @@protoc_insertion_point(field_release:Lazysplits.Proto.CsMessage.WatchVariable.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CsMessage_WatchVariable::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Lazysplits.Proto.CsMessage.WatchVariable.name)
}

// string value = 2;
inline void CsMessage_WatchVariable::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CsMessage_WatchVariable::value() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CsMessage.WatchVariable.value)
  return value_.GetNoArena();
}
inline void CsMessage_WatchVariable::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CsMessage.WatchVariable.value)
}
#if LANG_CXX11
inline void CsMessage_WatchVariable::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lazysplits.Proto.CsMessage.WatchVariable.value)
}
#endif
inline void CsMessage_WatchVariable::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lazysplits.Proto.CsMessage.WatchVariable.value)
}
inline void CsMessage_WatchVariable::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lazysplits.Proto.CsMessage.WatchVariable.value)
}
inline ::std::string* CsMessage_WatchVariable::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:Lazysplits.Proto.CsMessage.WatchVariable.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CsMessage_WatchVariable::release_value() {
  // @@protoc_insertion_point(field_release:Lazysplits.Proto.CsMessage.WatchVariable.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CsMessage_WatchVariable::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Lazysplits.Proto.CsMessage.WatchVariable.value)
}

// -------------------------------------------------------------------

// CsMessage

// int32 id = 1;
inline void CsMessage::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 CsMessage::id() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CsMessage.id)
  return id_;
}
inline void CsMessage::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CsMessage.id)
}

// .Lazysplits.Proto.CsMessage.MessageType type = 2;
inline void CsMessage::clear_type() {
  type_ = 0;
}
inline ::Lazysplits::Proto::CsMessage_MessageType CsMessage::type() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CsMessage.type)
  return static_cast< ::Lazysplits::Proto::CsMessage_MessageType >(type_);
}
inline void CsMessage::set_type(::Lazysplits::Proto::CsMessage_MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CsMessage.type)
}

// string shared_data_dir = 3;
inline void CsMessage::clear_shared_data_dir() {
  shared_data_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CsMessage::shared_data_dir() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CsMessage.shared_data_dir)
  return shared_data_dir_.GetNoArena();
}
inline void CsMessage::set_shared_data_dir(const ::std::string& value) {
  
  shared_data_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CsMessage.shared_data_dir)
}
#if LANG_CXX11
inline void CsMessage::set_shared_data_dir(::std::string&& value) {
  
  shared_data_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lazysplits.Proto.CsMessage.shared_data_dir)
}
#endif
inline void CsMessage::set_shared_data_dir(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  shared_data_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lazysplits.Proto.CsMessage.shared_data_dir)
}
inline void CsMessage::set_shared_data_dir(const char* value, size_t size) {
  
  shared_data_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lazysplits.Proto.CsMessage.shared_data_dir)
}
inline ::std::string* CsMessage::mutable_shared_data_dir() {
  
  // @@protoc_insertion_point(field_mutable:Lazysplits.Proto.CsMessage.shared_data_dir)
  return shared_data_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CsMessage::release_shared_data_dir() {
  // @@protoc_insertion_point(field_release:Lazysplits.Proto.CsMessage.shared_data_dir)
  
  return shared_data_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CsMessage::set_allocated_shared_data_dir(::std::string* shared_data_dir) {
  if (shared_data_dir != NULL) {
    
  } else {
    
  }
  shared_data_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shared_data_dir);
  // @@protoc_insertion_point(field_set_allocated:Lazysplits.Proto.CsMessage.shared_data_dir)
}

// string game_name = 4;
inline void CsMessage::clear_game_name() {
  game_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CsMessage::game_name() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CsMessage.game_name)
  return game_name_.GetNoArena();
}
inline void CsMessage::set_game_name(const ::std::string& value) {
  
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CsMessage.game_name)
}
#if LANG_CXX11
inline void CsMessage::set_game_name(::std::string&& value) {
  
  game_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lazysplits.Proto.CsMessage.game_name)
}
#endif
inline void CsMessage::set_game_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lazysplits.Proto.CsMessage.game_name)
}
inline void CsMessage::set_game_name(const char* value, size_t size) {
  
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lazysplits.Proto.CsMessage.game_name)
}
inline ::std::string* CsMessage::mutable_game_name() {
  
  // @@protoc_insertion_point(field_mutable:Lazysplits.Proto.CsMessage.game_name)
  return game_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CsMessage::release_game_name() {
  // @@protoc_insertion_point(field_release:Lazysplits.Proto.CsMessage.game_name)
  
  return game_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CsMessage::set_allocated_game_name(::std::string* game_name) {
  if (game_name != NULL) {
    
  } else {
    
  }
  game_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_name);
  // @@protoc_insertion_point(field_set_allocated:Lazysplits.Proto.CsMessage.game_name)
}

// string target_name = 5;
inline void CsMessage::clear_target_name() {
  target_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CsMessage::target_name() const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CsMessage.target_name)
  return target_name_.GetNoArena();
}
inline void CsMessage::set_target_name(const ::std::string& value) {
  
  target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Lazysplits.Proto.CsMessage.target_name)
}
#if LANG_CXX11
inline void CsMessage::set_target_name(::std::string&& value) {
  
  target_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Lazysplits.Proto.CsMessage.target_name)
}
#endif
inline void CsMessage::set_target_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Lazysplits.Proto.CsMessage.target_name)
}
inline void CsMessage::set_target_name(const char* value, size_t size) {
  
  target_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Lazysplits.Proto.CsMessage.target_name)
}
inline ::std::string* CsMessage::mutable_target_name() {
  
  // @@protoc_insertion_point(field_mutable:Lazysplits.Proto.CsMessage.target_name)
  return target_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CsMessage::release_target_name() {
  // @@protoc_insertion_point(field_release:Lazysplits.Proto.CsMessage.target_name)
  
  return target_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CsMessage::set_allocated_target_name(::std::string* target_name) {
  if (target_name != NULL) {
    
  } else {
    
  }
  target_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_name);
  // @@protoc_insertion_point(field_set_allocated:Lazysplits.Proto.CsMessage.target_name)
}

// repeated .Lazysplits.Proto.CsMessage.WatchVariable watch_variables = 6;
inline int CsMessage::watch_variables_size() const {
  return watch_variables_.size();
}
inline void CsMessage::clear_watch_variables() {
  watch_variables_.Clear();
}
inline ::Lazysplits::Proto::CsMessage_WatchVariable* CsMessage::mutable_watch_variables(int index) {
  // @@protoc_insertion_point(field_mutable:Lazysplits.Proto.CsMessage.watch_variables)
  return watch_variables_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Lazysplits::Proto::CsMessage_WatchVariable >*
CsMessage::mutable_watch_variables() {
  // @@protoc_insertion_point(field_mutable_list:Lazysplits.Proto.CsMessage.watch_variables)
  return &watch_variables_;
}
inline const ::Lazysplits::Proto::CsMessage_WatchVariable& CsMessage::watch_variables(int index) const {
  // @@protoc_insertion_point(field_get:Lazysplits.Proto.CsMessage.watch_variables)
  return watch_variables_.Get(index);
}
inline ::Lazysplits::Proto::CsMessage_WatchVariable* CsMessage::add_watch_variables() {
  // @@protoc_insertion_point(field_add:Lazysplits.Proto.CsMessage.watch_variables)
  return watch_variables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Lazysplits::Proto::CsMessage_WatchVariable >&
CsMessage::watch_variables() const {
  // @@protoc_insertion_point(field_list:Lazysplits.Proto.CsMessage.watch_variables)
  return watch_variables_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Lazysplits

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Lazysplits::Proto::CppMessage_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Lazysplits::Proto::CppMessage_MessageType>() {
  return ::Lazysplits::Proto::CppMessage_MessageType_descriptor();
}
template <> struct is_proto_enum< ::Lazysplits::Proto::CsMessage_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Lazysplits::Proto::CsMessage_MessageType>() {
  return ::Lazysplits::Proto::CsMessage_MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_LzsPipeProtoCpp_2eproto
