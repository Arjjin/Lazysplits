// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: LzsCvDataProtoCs.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LiveSplit.Lazysplits.Proto {

  /// <summary>Holder for reflection information generated from LzsCvDataProtoCs.proto</summary>
  public static partial class LzsCvDataProtoCsReflection {

    #region Descriptor
    /// <summary>File descriptor for LzsCvDataProtoCs.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LzsCvDataProtoCsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZMenNDdkRhdGFQcm90b0NzLnByb3RvEhpMaXZlU3BsaXQuTGF6eXNwbGl0",
            "cy5Qcm90byIhCglVU2NhbGFyMmQSCQoBeBgBIAEoERIJCgF5GAIgASgRIisK",
            "CFJHQkNvbG9yEgkKAVIYASABKA0SCQoBRxgCIAEoDRIJCgFCGAMgASgNInsK",
            "CEdhbWVMaXN0Ej0KBWdhbWVzGAEgAygLMi4uTGl2ZVNwbGl0LkxhenlzcGxp",
            "dHMuUHJvdG8uR2FtZUxpc3QuR2FtZUVudHJ5GjAKCUdhbWVFbnRyeRIMCgRu",
            "YW1lGAEgASgJEhUKDXJlbGF0aXZlX3BhdGgYAiABKAkijwEKCEdhbWVJbmZv",
            "EgwKBG5hbWUYASABKAkSQQoHdGFyZ2V0cxgCIAMoCzIwLkxpdmVTcGxpdC5M",
            "YXp5c3BsaXRzLlByb3RvLkdhbWVJbmZvLlRhcmdldEVudHJ5GjIKC1Rhcmdl",
            "dEVudHJ5EgwKBG5hbWUYASABKAkSFQoNcmVsYXRpdmVfcGF0aBgCIAEoCSKc",
            "BAoKVGFyZ2V0SW5mbxIMCgRuYW1lGAEgASgJEjQKBHR5cGUYAiABKA4yJi5M",
            "aXZlU3BsaXQuTGF6eXNwbGl0cy5Qcm90by5UYXJnZXRUeXBlEhcKD3NwbGl0",
            "X29mZnNldF9tcxgDIAEoERJCCgd3YXRjaGVzGAQgAygLMjEuTGl2ZVNwbGl0",
            "LkxhenlzcGxpdHMuUHJvdG8uVGFyZ2V0SW5mby5XYXRjaEVudHJ5GicKCFdh",
            "dGNoVmFyEgwKBG5hbWUYASABKAkSDQoFdmFsdWUYAiABKAkawwIKCldhdGNo",
            "RW50cnkSEwoLZW50cnlfbGFiZWwYCSABKAkSDAoEbmFtZRgBIAEoCRIVCg1y",
            "ZWxhdGl2ZV9wYXRoGAIgASgJEg0KBWluZGV4GAMgASgREjcKBmFjdGlvbhgE",
            "IAEoDjInLkxpdmVTcGxpdC5MYXp5c3BsaXRzLlByb3RvLldhdGNoQWN0aW9u",
            "EhIKCmFjdGlvbl92YWwYBSABKA0SQQoLcGVyc2lzdGVuY2UYBiABKA4yLC5M",
            "aXZlU3BsaXQuTGF6eXNwbGl0cy5Qcm90by5XYXRjaFBlcnNpc3RlbmNlEhcK",
            "D3BlcnNpc3RlbmNlX21heBgHIAEoDRJDCgp3YXRjaF92YXJzGAggAygLMi8u",
            "TGl2ZVNwbGl0LkxhenlzcGxpdHMuUHJvdG8uVGFyZ2V0SW5mby5XYXRjaFZh",
            "ciLbBwoJV2F0Y2hJbmZvEgwKBG5hbWUYASABKAkSMwoEdHlwZRgCIAEoDjIl",
            "LkxpdmVTcGxpdC5MYXp5c3BsaXRzLlByb3RvLldhdGNoVHlwZRI+Cg9iYXNl",
            "X2RpbWVuc2lvbnMYAyABKAsyJS5MaXZlU3BsaXQuTGF6eXNwbGl0cy5Qcm90",
            "by5VU2NhbGFyMmQSPQoEYXJlYRgEIAEoCzIvLkxpdmVTcGxpdC5MYXp5c3Bs",
            "aXRzLlByb3RvLldhdGNoSW5mby5XYXRjaEFyZWESHwoXYWRkaXRpb25hbF9h",
            "cmVhX3BhZGRpbmcYCyABKA0SFgoOYmFzZV90aHJlc2hvbGQYDCABKAISMwoF",
            "Y29sb3IYBSABKAsyJC5MaXZlU3BsaXQuTGF6eXNwbGl0cy5Qcm90by5SR0JD",
            "b2xvchIZChFpbWdfcmVsYXRpdmVfcGF0aBgGIAEoCRJHChFjaGFyYWN0ZXJf",
            "anVzdGlmeRgHIAEoDjIsLkxpdmVTcGxpdC5MYXp5c3BsaXRzLlByb3RvLkNo",
            "YXJhY3Rlckp1c3RpZnkSRgoRY2hhcmFjdGVyX3pfb3JkZXIYCCABKA4yKy5M",
            "aXZlU3BsaXQuTGF6eXNwbGl0cy5Qcm90by5DaGFyYWN0ZXJaT3JkZXISSAoK",
            "Y2hhcmFjdGVycxgJIAMoCzI0LkxpdmVTcGxpdC5MYXp5c3BsaXRzLlByb3Rv",
            "LldhdGNoSW5mby5DaGFyYWN0ZXJFbnRyeRJWChFhZGRpdGlvbmFsX29mZnNl",
            "dBgKIAMoCzI7LkxpdmVTcGxpdC5MYXp5c3BsaXRzLlByb3RvLldhdGNoSW5m",
            "by5BZGRpdGlvbmFsT2Zmc2V0RW50cnkadAoJV2F0Y2hBcmVhEjIKA2xvYxgB",
            "IAEoCzIlLkxpdmVTcGxpdC5MYXp5c3BsaXRzLlByb3RvLlVTY2FsYXIyZBIz",
            "CgRzaXplGAIgASgLMiUuTGl2ZVNwbGl0LkxhenlzcGxpdHMuUHJvdG8uVVNj",
            "YWxhcjJkGmYKDkNoYXJhY3RlckVudHJ5EhcKD2NoYXJhY3Rlcl9pbmRleBgB",
            "IAEoDRIVCg1jaGFyYWN0ZXJfdmFsGAIgASgJEhEKCXhfcGFkZGluZxgDIAEo",
            "ERIRCgl5X3BhZGRpbmcYBCABKBEacgoVQWRkaXRpb25hbE9mZnNldEVudHJ5",
            "EiIKGmNoYXJhY3Rlcl9sZW5ndGhfdGhyZXNob2xkGAEgASgNEjUKBm9mZnNl",
            "dBgCIAEoCzIlLkxpdmVTcGxpdC5MYXp5c3BsaXRzLlByb3RvLlVTY2FsYXIy",
            "ZCpZCgpUYXJnZXRUeXBlEg4KClRHVF9VTlVTRUQQABINCglUR1RfUkVTRVQQ",
            "ARINCglUR1RfU1RBUlQQAhIQCgxUR1RfU1RBTkRBUkQQAxILCgdUR1RfRU5E",
            "EAQqUwoJV2F0Y2hUeXBlEg0KCVdUX1VOVVNFRBAAEgwKCFdUX0NPTE9SEAES",
            "EwoPV1RfSU1BR0VfU1RBVElDEAISFAoQV1RfQ0hBUkFDVEVSX1NFVBADKnAK",
            "C1dhdGNoQWN0aW9uEg0KCVdBX1VOVVNFRBAAEhYKEldBX0lOQ1JFTUVOVF9J",
            "TkRFWBABEhYKEldBX0RFQ1JFTUVOVF9JTkRFWBACEhEKDVdBX0dPVE9fSU5E",
            "RVgQAxIPCgtXQV9DT01QTEVURRAEKkEKEFdhdGNoUGVyc2lzdGVuY2USCwoH",
            "V1BfTk9ORRAAEhIKDldQX1NQRUNJRllfTUFYEAESDAoIV1BfVE9UQUwQAiqH",
            "AQoQQ2hhcmFjdGVySnVzdGlmeRIcChhDSEFSQUNURVJfSlVTVElGWV9VTlVT",
            "RUQQABIaChZDSEFSQUNURVJfSlVTVElGWV9MRUZUEAESGwoXQ0hBUkFDVEVS",
            "X0pVU1RJRllfUklHSFQQAhIcChhDSEFSQUNURVJfSlVTVElGWV9DRU5URVIQ",
            "AypnCg9DaGFyYWN0ZXJaT3JkZXISFgoSQ0hBUkFDVEVSX1pfVU5VU0VEEAAS",
            "HQoZQ0hBUkFDVEVSX1pfTEVGVF9UT19SSUdIVBABEh0KGUNIQVJBQ1RFUl9a",
            "X1JJR0hUX1RPX0xFRlQQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::LiveSplit.Lazysplits.Proto.TargetType), typeof(global::LiveSplit.Lazysplits.Proto.WatchType), typeof(global::LiveSplit.Lazysplits.Proto.WatchAction), typeof(global::LiveSplit.Lazysplits.Proto.WatchPersistence), typeof(global::LiveSplit.Lazysplits.Proto.CharacterJustify), typeof(global::LiveSplit.Lazysplits.Proto.CharacterZOrder), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveSplit.Lazysplits.Proto.UScalar2d), global::LiveSplit.Lazysplits.Proto.UScalar2d.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveSplit.Lazysplits.Proto.RGBColor), global::LiveSplit.Lazysplits.Proto.RGBColor.Parser, new[]{ "R", "G", "B" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveSplit.Lazysplits.Proto.GameList), global::LiveSplit.Lazysplits.Proto.GameList.Parser, new[]{ "Games" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LiveSplit.Lazysplits.Proto.GameList.Types.GameEntry), global::LiveSplit.Lazysplits.Proto.GameList.Types.GameEntry.Parser, new[]{ "Name", "RelativePath" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveSplit.Lazysplits.Proto.GameInfo), global::LiveSplit.Lazysplits.Proto.GameInfo.Parser, new[]{ "Name", "Targets" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LiveSplit.Lazysplits.Proto.GameInfo.Types.TargetEntry), global::LiveSplit.Lazysplits.Proto.GameInfo.Types.TargetEntry.Parser, new[]{ "Name", "RelativePath" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveSplit.Lazysplits.Proto.TargetInfo), global::LiveSplit.Lazysplits.Proto.TargetInfo.Parser, new[]{ "Name", "Type", "SplitOffsetMs", "Watches" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LiveSplit.Lazysplits.Proto.TargetInfo.Types.WatchVar), global::LiveSplit.Lazysplits.Proto.TargetInfo.Types.WatchVar.Parser, new[]{ "Name", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveSplit.Lazysplits.Proto.TargetInfo.Types.WatchEntry), global::LiveSplit.Lazysplits.Proto.TargetInfo.Types.WatchEntry.Parser, new[]{ "EntryLabel", "Name", "RelativePath", "Index", "Action", "ActionVal", "Persistence", "PersistenceMax", "WatchVars" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveSplit.Lazysplits.Proto.WatchInfo), global::LiveSplit.Lazysplits.Proto.WatchInfo.Parser, new[]{ "Name", "Type", "BaseDimensions", "Area", "AdditionalAreaPadding", "BaseThreshold", "Color", "ImgRelativePath", "CharacterJustify", "CharacterZOrder", "Characters", "AdditionalOffset" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.WatchArea), global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.WatchArea.Parser, new[]{ "Loc", "Size" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.CharacterEntry), global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.CharacterEntry.Parser, new[]{ "CharacterIndex", "CharacterVal", "XPadding", "YPadding" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.AdditionalOffsetEntry), global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.AdditionalOffsetEntry.Parser, new[]{ "CharacterLengthThreshold", "Offset" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum TargetType {
    [pbr::OriginalName("TGT_UNUSED")] TgtUnused = 0,
    [pbr::OriginalName("TGT_RESET")] TgtReset = 1,
    [pbr::OriginalName("TGT_START")] TgtStart = 2,
    [pbr::OriginalName("TGT_STANDARD")] TgtStandard = 3,
    [pbr::OriginalName("TGT_END")] TgtEnd = 4,
  }

  public enum WatchType {
    [pbr::OriginalName("WT_UNUSED")] WtUnused = 0,
    [pbr::OriginalName("WT_COLOR")] WtColor = 1,
    [pbr::OriginalName("WT_IMAGE_STATIC")] WtImageStatic = 2,
    [pbr::OriginalName("WT_CHARACTER_SET")] WtCharacterSet = 3,
  }

  public enum WatchAction {
    [pbr::OriginalName("WA_UNUSED")] WaUnused = 0,
    [pbr::OriginalName("WA_INCREMENT_INDEX")] WaIncrementIndex = 1,
    [pbr::OriginalName("WA_DECREMENT_INDEX")] WaDecrementIndex = 2,
    [pbr::OriginalName("WA_GOTO_INDEX")] WaGotoIndex = 3,
    [pbr::OriginalName("WA_COMPLETE")] WaComplete = 4,
  }

  public enum WatchPersistence {
    [pbr::OriginalName("WP_NONE")] WpNone = 0,
    [pbr::OriginalName("WP_SPECIFY_MAX")] WpSpecifyMax = 1,
    [pbr::OriginalName("WP_TOTAL")] WpTotal = 2,
  }

  public enum CharacterJustify {
    [pbr::OriginalName("CHARACTER_JUSTIFY_UNUSED")] Unused = 0,
    [pbr::OriginalName("CHARACTER_JUSTIFY_LEFT")] Left = 1,
    [pbr::OriginalName("CHARACTER_JUSTIFY_RIGHT")] Right = 2,
    [pbr::OriginalName("CHARACTER_JUSTIFY_CENTER")] Center = 3,
  }

  public enum CharacterZOrder {
    [pbr::OriginalName("CHARACTER_Z_UNUSED")] CharacterZUnused = 0,
    [pbr::OriginalName("CHARACTER_Z_LEFT_TO_RIGHT")] CharacterZLeftToRight = 1,
    [pbr::OriginalName("CHARACTER_Z_RIGHT_TO_LEFT")] CharacterZRightToLeft = 2,
  }

  #endregion

  #region Messages
  public sealed partial class UScalar2d : pb::IMessage<UScalar2d> {
    private static readonly pb::MessageParser<UScalar2d> _parser = new pb::MessageParser<UScalar2d>(() => new UScalar2d());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UScalar2d> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveSplit.Lazysplits.Proto.LzsCvDataProtoCsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UScalar2d() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UScalar2d(UScalar2d other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UScalar2d Clone() {
      return new UScalar2d(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UScalar2d);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UScalar2d other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UScalar2d other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadSInt32();
            break;
          }
          case 16: {
            Y = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RGBColor : pb::IMessage<RGBColor> {
    private static readonly pb::MessageParser<RGBColor> _parser = new pb::MessageParser<RGBColor>(() => new RGBColor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RGBColor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveSplit.Lazysplits.Proto.LzsCvDataProtoCsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RGBColor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RGBColor(RGBColor other) : this() {
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RGBColor Clone() {
      return new RGBColor(this);
    }

    /// <summary>Field number for the "R" field.</summary>
    public const int RFieldNumber = 1;
    private uint r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "G" field.</summary>
    public const int GFieldNumber = 2;
    private uint g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "B" field.</summary>
    public const int BFieldNumber = 3;
    private uint b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RGBColor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RGBColor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (R != other.R) return false;
      if (G != other.G) return false;
      if (B != other.B) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R != 0) hash ^= R.GetHashCode();
      if (G != 0) hash ^= G.GetHashCode();
      if (B != 0) hash ^= B.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (R != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(R);
      }
      if (G != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(G);
      }
      if (B != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(B);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(R);
      }
      if (G != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(G);
      }
      if (B != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(B);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RGBColor other) {
      if (other == null) {
        return;
      }
      if (other.R != 0) {
        R = other.R;
      }
      if (other.G != 0) {
        G = other.G;
      }
      if (other.B != 0) {
        B = other.B;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            R = input.ReadUInt32();
            break;
          }
          case 16: {
            G = input.ReadUInt32();
            break;
          }
          case 24: {
            B = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameList : pb::IMessage<GameList> {
    private static readonly pb::MessageParser<GameList> _parser = new pb::MessageParser<GameList>(() => new GameList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveSplit.Lazysplits.Proto.LzsCvDataProtoCsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameList(GameList other) : this() {
      games_ = other.games_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameList Clone() {
      return new GameList(this);
    }

    /// <summary>Field number for the "games" field.</summary>
    public const int GamesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LiveSplit.Lazysplits.Proto.GameList.Types.GameEntry> _repeated_games_codec
        = pb::FieldCodec.ForMessage(10, global::LiveSplit.Lazysplits.Proto.GameList.Types.GameEntry.Parser);
    private readonly pbc::RepeatedField<global::LiveSplit.Lazysplits.Proto.GameList.Types.GameEntry> games_ = new pbc::RepeatedField<global::LiveSplit.Lazysplits.Proto.GameList.Types.GameEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LiveSplit.Lazysplits.Proto.GameList.Types.GameEntry> Games {
      get { return games_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!games_.Equals(other.games_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= games_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      games_.WriteTo(output, _repeated_games_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += games_.CalculateSize(_repeated_games_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameList other) {
      if (other == null) {
        return;
      }
      games_.Add(other.games_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            games_.AddEntriesFrom(input, _repeated_games_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GameList message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class GameEntry : pb::IMessage<GameEntry> {
        private static readonly pb::MessageParser<GameEntry> _parser = new pb::MessageParser<GameEntry>(() => new GameEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<GameEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LiveSplit.Lazysplits.Proto.GameList.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameEntry(GameEntry other) : this() {
          name_ = other.name_;
          relativePath_ = other.relativePath_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public GameEntry Clone() {
          return new GameEntry(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "relative_path" field.</summary>
        public const int RelativePathFieldNumber = 2;
        private string relativePath_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RelativePath {
          get { return relativePath_; }
          set {
            relativePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as GameEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(GameEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (RelativePath != other.RelativePath) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (RelativePath.Length != 0) hash ^= RelativePath.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (RelativePath.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(RelativePath);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (RelativePath.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RelativePath);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(GameEntry other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.RelativePath.Length != 0) {
            RelativePath = other.RelativePath;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                RelativePath = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class GameInfo : pb::IMessage<GameInfo> {
    private static readonly pb::MessageParser<GameInfo> _parser = new pb::MessageParser<GameInfo>(() => new GameInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveSplit.Lazysplits.Proto.LzsCvDataProtoCsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo(GameInfo other) : this() {
      name_ = other.name_;
      targets_ = other.targets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo Clone() {
      return new GameInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::LiveSplit.Lazysplits.Proto.GameInfo.Types.TargetEntry> _repeated_targets_codec
        = pb::FieldCodec.ForMessage(18, global::LiveSplit.Lazysplits.Proto.GameInfo.Types.TargetEntry.Parser);
    private readonly pbc::RepeatedField<global::LiveSplit.Lazysplits.Proto.GameInfo.Types.TargetEntry> targets_ = new pbc::RepeatedField<global::LiveSplit.Lazysplits.Proto.GameInfo.Types.TargetEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LiveSplit.Lazysplits.Proto.GameInfo.Types.TargetEntry> Targets {
      get { return targets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!targets_.Equals(other.targets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= targets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      targets_.Add(other.targets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GameInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class TargetEntry : pb::IMessage<TargetEntry> {
        private static readonly pb::MessageParser<TargetEntry> _parser = new pb::MessageParser<TargetEntry>(() => new TargetEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TargetEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LiveSplit.Lazysplits.Proto.GameInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TargetEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TargetEntry(TargetEntry other) : this() {
          name_ = other.name_;
          relativePath_ = other.relativePath_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TargetEntry Clone() {
          return new TargetEntry(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "relative_path" field.</summary>
        public const int RelativePathFieldNumber = 2;
        private string relativePath_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RelativePath {
          get { return relativePath_; }
          set {
            relativePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TargetEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TargetEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (RelativePath != other.RelativePath) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (RelativePath.Length != 0) hash ^= RelativePath.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (RelativePath.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(RelativePath);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (RelativePath.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RelativePath);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TargetEntry other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.RelativePath.Length != 0) {
            RelativePath = other.RelativePath;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                RelativePath = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class TargetInfo : pb::IMessage<TargetInfo> {
    private static readonly pb::MessageParser<TargetInfo> _parser = new pb::MessageParser<TargetInfo>(() => new TargetInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TargetInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveSplit.Lazysplits.Proto.LzsCvDataProtoCsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetInfo(TargetInfo other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      splitOffsetMs_ = other.splitOffsetMs_;
      watches_ = other.watches_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetInfo Clone() {
      return new TargetInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::LiveSplit.Lazysplits.Proto.TargetType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveSplit.Lazysplits.Proto.TargetType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "split_offset_ms" field.</summary>
    public const int SplitOffsetMsFieldNumber = 3;
    private int splitOffsetMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SplitOffsetMs {
      get { return splitOffsetMs_; }
      set {
        splitOffsetMs_ = value;
      }
    }

    /// <summary>Field number for the "watches" field.</summary>
    public const int WatchesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::LiveSplit.Lazysplits.Proto.TargetInfo.Types.WatchEntry> _repeated_watches_codec
        = pb::FieldCodec.ForMessage(34, global::LiveSplit.Lazysplits.Proto.TargetInfo.Types.WatchEntry.Parser);
    private readonly pbc::RepeatedField<global::LiveSplit.Lazysplits.Proto.TargetInfo.Types.WatchEntry> watches_ = new pbc::RepeatedField<global::LiveSplit.Lazysplits.Proto.TargetInfo.Types.WatchEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LiveSplit.Lazysplits.Proto.TargetInfo.Types.WatchEntry> Watches {
      get { return watches_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TargetInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TargetInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (SplitOffsetMs != other.SplitOffsetMs) return false;
      if(!watches_.Equals(other.watches_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (SplitOffsetMs != 0) hash ^= SplitOffsetMs.GetHashCode();
      hash ^= watches_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (SplitOffsetMs != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(SplitOffsetMs);
      }
      watches_.WriteTo(output, _repeated_watches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (SplitOffsetMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(SplitOffsetMs);
      }
      size += watches_.CalculateSize(_repeated_watches_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TargetInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.SplitOffsetMs != 0) {
        SplitOffsetMs = other.SplitOffsetMs;
      }
      watches_.Add(other.watches_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::LiveSplit.Lazysplits.Proto.TargetType) input.ReadEnum();
            break;
          }
          case 24: {
            SplitOffsetMs = input.ReadSInt32();
            break;
          }
          case 34: {
            watches_.AddEntriesFrom(input, _repeated_watches_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TargetInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class WatchVar : pb::IMessage<WatchVar> {
        private static readonly pb::MessageParser<WatchVar> _parser = new pb::MessageParser<WatchVar>(() => new WatchVar());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WatchVar> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LiveSplit.Lazysplits.Proto.TargetInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WatchVar() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WatchVar(WatchVar other) : this() {
          name_ = other.name_;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WatchVar Clone() {
          return new WatchVar(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private string value_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Value {
          get { return value_; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WatchVar);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WatchVar other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Value.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WatchVar other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                Value = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class WatchEntry : pb::IMessage<WatchEntry> {
        private static readonly pb::MessageParser<WatchEntry> _parser = new pb::MessageParser<WatchEntry>(() => new WatchEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WatchEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LiveSplit.Lazysplits.Proto.TargetInfo.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WatchEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WatchEntry(WatchEntry other) : this() {
          entryLabel_ = other.entryLabel_;
          name_ = other.name_;
          relativePath_ = other.relativePath_;
          index_ = other.index_;
          action_ = other.action_;
          actionVal_ = other.actionVal_;
          persistence_ = other.persistence_;
          persistenceMax_ = other.persistenceMax_;
          watchVars_ = other.watchVars_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WatchEntry Clone() {
          return new WatchEntry(this);
        }

        /// <summary>Field number for the "entry_label" field.</summary>
        public const int EntryLabelFieldNumber = 9;
        private string entryLabel_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EntryLabel {
          get { return entryLabel_; }
          set {
            entryLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "relative_path" field.</summary>
        public const int RelativePathFieldNumber = 2;
        private string relativePath_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RelativePath {
          get { return relativePath_; }
          set {
            relativePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "index" field.</summary>
        public const int IndexFieldNumber = 3;
        private int index_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Index {
          get { return index_; }
          set {
            index_ = value;
          }
        }

        /// <summary>Field number for the "action" field.</summary>
        public const int ActionFieldNumber = 4;
        private global::LiveSplit.Lazysplits.Proto.WatchAction action_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LiveSplit.Lazysplits.Proto.WatchAction Action {
          get { return action_; }
          set {
            action_ = value;
          }
        }

        /// <summary>Field number for the "action_val" field.</summary>
        public const int ActionValFieldNumber = 5;
        private uint actionVal_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ActionVal {
          get { return actionVal_; }
          set {
            actionVal_ = value;
          }
        }

        /// <summary>Field number for the "persistence" field.</summary>
        public const int PersistenceFieldNumber = 6;
        private global::LiveSplit.Lazysplits.Proto.WatchPersistence persistence_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LiveSplit.Lazysplits.Proto.WatchPersistence Persistence {
          get { return persistence_; }
          set {
            persistence_ = value;
          }
        }

        /// <summary>Field number for the "persistence_max" field.</summary>
        public const int PersistenceMaxFieldNumber = 7;
        private uint persistenceMax_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PersistenceMax {
          get { return persistenceMax_; }
          set {
            persistenceMax_ = value;
          }
        }

        /// <summary>Field number for the "watch_vars" field.</summary>
        public const int WatchVarsFieldNumber = 8;
        private static readonly pb::FieldCodec<global::LiveSplit.Lazysplits.Proto.TargetInfo.Types.WatchVar> _repeated_watchVars_codec
            = pb::FieldCodec.ForMessage(66, global::LiveSplit.Lazysplits.Proto.TargetInfo.Types.WatchVar.Parser);
        private readonly pbc::RepeatedField<global::LiveSplit.Lazysplits.Proto.TargetInfo.Types.WatchVar> watchVars_ = new pbc::RepeatedField<global::LiveSplit.Lazysplits.Proto.TargetInfo.Types.WatchVar>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::LiveSplit.Lazysplits.Proto.TargetInfo.Types.WatchVar> WatchVars {
          get { return watchVars_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WatchEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WatchEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EntryLabel != other.EntryLabel) return false;
          if (Name != other.Name) return false;
          if (RelativePath != other.RelativePath) return false;
          if (Index != other.Index) return false;
          if (Action != other.Action) return false;
          if (ActionVal != other.ActionVal) return false;
          if (Persistence != other.Persistence) return false;
          if (PersistenceMax != other.PersistenceMax) return false;
          if(!watchVars_.Equals(other.watchVars_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (EntryLabel.Length != 0) hash ^= EntryLabel.GetHashCode();
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (RelativePath.Length != 0) hash ^= RelativePath.GetHashCode();
          if (Index != 0) hash ^= Index.GetHashCode();
          if (Action != 0) hash ^= Action.GetHashCode();
          if (ActionVal != 0) hash ^= ActionVal.GetHashCode();
          if (Persistence != 0) hash ^= Persistence.GetHashCode();
          if (PersistenceMax != 0) hash ^= PersistenceMax.GetHashCode();
          hash ^= watchVars_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (RelativePath.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(RelativePath);
          }
          if (Index != 0) {
            output.WriteRawTag(24);
            output.WriteSInt32(Index);
          }
          if (Action != 0) {
            output.WriteRawTag(32);
            output.WriteEnum((int) Action);
          }
          if (ActionVal != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(ActionVal);
          }
          if (Persistence != 0) {
            output.WriteRawTag(48);
            output.WriteEnum((int) Persistence);
          }
          if (PersistenceMax != 0) {
            output.WriteRawTag(56);
            output.WriteUInt32(PersistenceMax);
          }
          watchVars_.WriteTo(output, _repeated_watchVars_codec);
          if (EntryLabel.Length != 0) {
            output.WriteRawTag(74);
            output.WriteString(EntryLabel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (EntryLabel.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(EntryLabel);
          }
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (RelativePath.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RelativePath);
          }
          if (Index != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Index);
          }
          if (Action != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
          }
          if (ActionVal != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ActionVal);
          }
          if (Persistence != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Persistence);
          }
          if (PersistenceMax != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PersistenceMax);
          }
          size += watchVars_.CalculateSize(_repeated_watchVars_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WatchEntry other) {
          if (other == null) {
            return;
          }
          if (other.EntryLabel.Length != 0) {
            EntryLabel = other.EntryLabel;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.RelativePath.Length != 0) {
            RelativePath = other.RelativePath;
          }
          if (other.Index != 0) {
            Index = other.Index;
          }
          if (other.Action != 0) {
            Action = other.Action;
          }
          if (other.ActionVal != 0) {
            ActionVal = other.ActionVal;
          }
          if (other.Persistence != 0) {
            Persistence = other.Persistence;
          }
          if (other.PersistenceMax != 0) {
            PersistenceMax = other.PersistenceMax;
          }
          watchVars_.Add(other.watchVars_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                RelativePath = input.ReadString();
                break;
              }
              case 24: {
                Index = input.ReadSInt32();
                break;
              }
              case 32: {
                action_ = (global::LiveSplit.Lazysplits.Proto.WatchAction) input.ReadEnum();
                break;
              }
              case 40: {
                ActionVal = input.ReadUInt32();
                break;
              }
              case 48: {
                persistence_ = (global::LiveSplit.Lazysplits.Proto.WatchPersistence) input.ReadEnum();
                break;
              }
              case 56: {
                PersistenceMax = input.ReadUInt32();
                break;
              }
              case 66: {
                watchVars_.AddEntriesFrom(input, _repeated_watchVars_codec);
                break;
              }
              case 74: {
                EntryLabel = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class WatchInfo : pb::IMessage<WatchInfo> {
    private static readonly pb::MessageParser<WatchInfo> _parser = new pb::MessageParser<WatchInfo>(() => new WatchInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WatchInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LiveSplit.Lazysplits.Proto.LzsCvDataProtoCsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchInfo(WatchInfo other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      BaseDimensions = other.baseDimensions_ != null ? other.BaseDimensions.Clone() : null;
      Area = other.area_ != null ? other.Area.Clone() : null;
      additionalAreaPadding_ = other.additionalAreaPadding_;
      baseThreshold_ = other.baseThreshold_;
      Color = other.color_ != null ? other.Color.Clone() : null;
      imgRelativePath_ = other.imgRelativePath_;
      characterJustify_ = other.characterJustify_;
      characterZOrder_ = other.characterZOrder_;
      characters_ = other.characters_.Clone();
      additionalOffset_ = other.additionalOffset_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WatchInfo Clone() {
      return new WatchInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::LiveSplit.Lazysplits.Proto.WatchType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveSplit.Lazysplits.Proto.WatchType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "base_dimensions" field.</summary>
    public const int BaseDimensionsFieldNumber = 3;
    private global::LiveSplit.Lazysplits.Proto.UScalar2d baseDimensions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveSplit.Lazysplits.Proto.UScalar2d BaseDimensions {
      get { return baseDimensions_; }
      set {
        baseDimensions_ = value;
      }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 4;
    private global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.WatchArea area_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.WatchArea Area {
      get { return area_; }
      set {
        area_ = value;
      }
    }

    /// <summary>Field number for the "additional_area_padding" field.</summary>
    public const int AdditionalAreaPaddingFieldNumber = 11;
    private uint additionalAreaPadding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AdditionalAreaPadding {
      get { return additionalAreaPadding_; }
      set {
        additionalAreaPadding_ = value;
      }
    }

    /// <summary>Field number for the "base_threshold" field.</summary>
    public const int BaseThresholdFieldNumber = 12;
    private float baseThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BaseThreshold {
      get { return baseThreshold_; }
      set {
        baseThreshold_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 5;
    private global::LiveSplit.Lazysplits.Proto.RGBColor color_;
    /// <summary>
    ///color watch specific
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveSplit.Lazysplits.Proto.RGBColor Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "img_relative_path" field.</summary>
    public const int ImgRelativePathFieldNumber = 6;
    private string imgRelativePath_ = "";
    /// <summary>
    ///static image/character set specific
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImgRelativePath {
      get { return imgRelativePath_; }
      set {
        imgRelativePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "character_justify" field.</summary>
    public const int CharacterJustifyFieldNumber = 7;
    private global::LiveSplit.Lazysplits.Proto.CharacterJustify characterJustify_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveSplit.Lazysplits.Proto.CharacterJustify CharacterJustify {
      get { return characterJustify_; }
      set {
        characterJustify_ = value;
      }
    }

    /// <summary>Field number for the "character_z_order" field.</summary>
    public const int CharacterZOrderFieldNumber = 8;
    private global::LiveSplit.Lazysplits.Proto.CharacterZOrder characterZOrder_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LiveSplit.Lazysplits.Proto.CharacterZOrder CharacterZOrder {
      get { return characterZOrder_; }
      set {
        characterZOrder_ = value;
      }
    }

    /// <summary>Field number for the "characters" field.</summary>
    public const int CharactersFieldNumber = 9;
    private static readonly pb::FieldCodec<global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.CharacterEntry> _repeated_characters_codec
        = pb::FieldCodec.ForMessage(74, global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.CharacterEntry.Parser);
    private readonly pbc::RepeatedField<global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.CharacterEntry> characters_ = new pbc::RepeatedField<global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.CharacterEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.CharacterEntry> Characters {
      get { return characters_; }
    }

    /// <summary>Field number for the "additional_offset" field.</summary>
    public const int AdditionalOffsetFieldNumber = 10;
    private static readonly pb::FieldCodec<global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.AdditionalOffsetEntry> _repeated_additionalOffset_codec
        = pb::FieldCodec.ForMessage(82, global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.AdditionalOffsetEntry.Parser);
    private readonly pbc::RepeatedField<global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.AdditionalOffsetEntry> additionalOffset_ = new pbc::RepeatedField<global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.AdditionalOffsetEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.AdditionalOffsetEntry> AdditionalOffset {
      get { return additionalOffset_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WatchInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WatchInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(BaseDimensions, other.BaseDimensions)) return false;
      if (!object.Equals(Area, other.Area)) return false;
      if (AdditionalAreaPadding != other.AdditionalAreaPadding) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BaseThreshold, other.BaseThreshold)) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (ImgRelativePath != other.ImgRelativePath) return false;
      if (CharacterJustify != other.CharacterJustify) return false;
      if (CharacterZOrder != other.CharacterZOrder) return false;
      if(!characters_.Equals(other.characters_)) return false;
      if(!additionalOffset_.Equals(other.additionalOffset_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (baseDimensions_ != null) hash ^= BaseDimensions.GetHashCode();
      if (area_ != null) hash ^= Area.GetHashCode();
      if (AdditionalAreaPadding != 0) hash ^= AdditionalAreaPadding.GetHashCode();
      if (BaseThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BaseThreshold);
      if (color_ != null) hash ^= Color.GetHashCode();
      if (ImgRelativePath.Length != 0) hash ^= ImgRelativePath.GetHashCode();
      if (CharacterJustify != 0) hash ^= CharacterJustify.GetHashCode();
      if (CharacterZOrder != 0) hash ^= CharacterZOrder.GetHashCode();
      hash ^= characters_.GetHashCode();
      hash ^= additionalOffset_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (baseDimensions_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BaseDimensions);
      }
      if (area_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Area);
      }
      if (color_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Color);
      }
      if (ImgRelativePath.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ImgRelativePath);
      }
      if (CharacterJustify != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) CharacterJustify);
      }
      if (CharacterZOrder != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) CharacterZOrder);
      }
      characters_.WriteTo(output, _repeated_characters_codec);
      additionalOffset_.WriteTo(output, _repeated_additionalOffset_codec);
      if (AdditionalAreaPadding != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(AdditionalAreaPadding);
      }
      if (BaseThreshold != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(BaseThreshold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (baseDimensions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseDimensions);
      }
      if (area_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Area);
      }
      if (AdditionalAreaPadding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AdditionalAreaPadding);
      }
      if (BaseThreshold != 0F) {
        size += 1 + 4;
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (ImgRelativePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImgRelativePath);
      }
      if (CharacterJustify != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CharacterJustify);
      }
      if (CharacterZOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CharacterZOrder);
      }
      size += characters_.CalculateSize(_repeated_characters_codec);
      size += additionalOffset_.CalculateSize(_repeated_additionalOffset_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WatchInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.baseDimensions_ != null) {
        if (baseDimensions_ == null) {
          baseDimensions_ = new global::LiveSplit.Lazysplits.Proto.UScalar2d();
        }
        BaseDimensions.MergeFrom(other.BaseDimensions);
      }
      if (other.area_ != null) {
        if (area_ == null) {
          area_ = new global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.WatchArea();
        }
        Area.MergeFrom(other.Area);
      }
      if (other.AdditionalAreaPadding != 0) {
        AdditionalAreaPadding = other.AdditionalAreaPadding;
      }
      if (other.BaseThreshold != 0F) {
        BaseThreshold = other.BaseThreshold;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          color_ = new global::LiveSplit.Lazysplits.Proto.RGBColor();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.ImgRelativePath.Length != 0) {
        ImgRelativePath = other.ImgRelativePath;
      }
      if (other.CharacterJustify != 0) {
        CharacterJustify = other.CharacterJustify;
      }
      if (other.CharacterZOrder != 0) {
        CharacterZOrder = other.CharacterZOrder;
      }
      characters_.Add(other.characters_);
      additionalOffset_.Add(other.additionalOffset_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::LiveSplit.Lazysplits.Proto.WatchType) input.ReadEnum();
            break;
          }
          case 26: {
            if (baseDimensions_ == null) {
              baseDimensions_ = new global::LiveSplit.Lazysplits.Proto.UScalar2d();
            }
            input.ReadMessage(baseDimensions_);
            break;
          }
          case 34: {
            if (area_ == null) {
              area_ = new global::LiveSplit.Lazysplits.Proto.WatchInfo.Types.WatchArea();
            }
            input.ReadMessage(area_);
            break;
          }
          case 42: {
            if (color_ == null) {
              color_ = new global::LiveSplit.Lazysplits.Proto.RGBColor();
            }
            input.ReadMessage(color_);
            break;
          }
          case 50: {
            ImgRelativePath = input.ReadString();
            break;
          }
          case 56: {
            characterJustify_ = (global::LiveSplit.Lazysplits.Proto.CharacterJustify) input.ReadEnum();
            break;
          }
          case 64: {
            characterZOrder_ = (global::LiveSplit.Lazysplits.Proto.CharacterZOrder) input.ReadEnum();
            break;
          }
          case 74: {
            characters_.AddEntriesFrom(input, _repeated_characters_codec);
            break;
          }
          case 82: {
            additionalOffset_.AddEntriesFrom(input, _repeated_additionalOffset_codec);
            break;
          }
          case 88: {
            AdditionalAreaPadding = input.ReadUInt32();
            break;
          }
          case 101: {
            BaseThreshold = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WatchInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class WatchArea : pb::IMessage<WatchArea> {
        private static readonly pb::MessageParser<WatchArea> _parser = new pb::MessageParser<WatchArea>(() => new WatchArea());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WatchArea> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LiveSplit.Lazysplits.Proto.WatchInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WatchArea() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WatchArea(WatchArea other) : this() {
          Loc = other.loc_ != null ? other.Loc.Clone() : null;
          Size = other.size_ != null ? other.Size.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WatchArea Clone() {
          return new WatchArea(this);
        }

        /// <summary>Field number for the "loc" field.</summary>
        public const int LocFieldNumber = 1;
        private global::LiveSplit.Lazysplits.Proto.UScalar2d loc_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LiveSplit.Lazysplits.Proto.UScalar2d Loc {
          get { return loc_; }
          set {
            loc_ = value;
          }
        }

        /// <summary>Field number for the "size" field.</summary>
        public const int SizeFieldNumber = 2;
        private global::LiveSplit.Lazysplits.Proto.UScalar2d size_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LiveSplit.Lazysplits.Proto.UScalar2d Size {
          get { return size_; }
          set {
            size_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WatchArea);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WatchArea other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Loc, other.Loc)) return false;
          if (!object.Equals(Size, other.Size)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (loc_ != null) hash ^= Loc.GetHashCode();
          if (size_ != null) hash ^= Size.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (loc_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Loc);
          }
          if (size_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Size);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (loc_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Loc);
          }
          if (size_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Size);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WatchArea other) {
          if (other == null) {
            return;
          }
          if (other.loc_ != null) {
            if (loc_ == null) {
              loc_ = new global::LiveSplit.Lazysplits.Proto.UScalar2d();
            }
            Loc.MergeFrom(other.Loc);
          }
          if (other.size_ != null) {
            if (size_ == null) {
              size_ = new global::LiveSplit.Lazysplits.Proto.UScalar2d();
            }
            Size.MergeFrom(other.Size);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (loc_ == null) {
                  loc_ = new global::LiveSplit.Lazysplits.Proto.UScalar2d();
                }
                input.ReadMessage(loc_);
                break;
              }
              case 18: {
                if (size_ == null) {
                  size_ = new global::LiveSplit.Lazysplits.Proto.UScalar2d();
                }
                input.ReadMessage(size_);
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///character set specific
      /// </summary>
      public sealed partial class CharacterEntry : pb::IMessage<CharacterEntry> {
        private static readonly pb::MessageParser<CharacterEntry> _parser = new pb::MessageParser<CharacterEntry>(() => new CharacterEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CharacterEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LiveSplit.Lazysplits.Proto.WatchInfo.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CharacterEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CharacterEntry(CharacterEntry other) : this() {
          characterIndex_ = other.characterIndex_;
          characterVal_ = other.characterVal_;
          xPadding_ = other.xPadding_;
          yPadding_ = other.yPadding_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CharacterEntry Clone() {
          return new CharacterEntry(this);
        }

        /// <summary>Field number for the "character_index" field.</summary>
        public const int CharacterIndexFieldNumber = 1;
        private uint characterIndex_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CharacterIndex {
          get { return characterIndex_; }
          set {
            characterIndex_ = value;
          }
        }

        /// <summary>Field number for the "character_val" field.</summary>
        public const int CharacterValFieldNumber = 2;
        private string characterVal_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string CharacterVal {
          get { return characterVal_; }
          set {
            characterVal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "x_padding" field.</summary>
        public const int XPaddingFieldNumber = 3;
        private int xPadding_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int XPadding {
          get { return xPadding_; }
          set {
            xPadding_ = value;
          }
        }

        /// <summary>Field number for the "y_padding" field.</summary>
        public const int YPaddingFieldNumber = 4;
        private int yPadding_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int YPadding {
          get { return yPadding_; }
          set {
            yPadding_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as CharacterEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CharacterEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CharacterIndex != other.CharacterIndex) return false;
          if (CharacterVal != other.CharacterVal) return false;
          if (XPadding != other.XPadding) return false;
          if (YPadding != other.YPadding) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CharacterIndex != 0) hash ^= CharacterIndex.GetHashCode();
          if (CharacterVal.Length != 0) hash ^= CharacterVal.GetHashCode();
          if (XPadding != 0) hash ^= XPadding.GetHashCode();
          if (YPadding != 0) hash ^= YPadding.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CharacterIndex != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(CharacterIndex);
          }
          if (CharacterVal.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(CharacterVal);
          }
          if (XPadding != 0) {
            output.WriteRawTag(24);
            output.WriteSInt32(XPadding);
          }
          if (YPadding != 0) {
            output.WriteRawTag(32);
            output.WriteSInt32(YPadding);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CharacterIndex != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CharacterIndex);
          }
          if (CharacterVal.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(CharacterVal);
          }
          if (XPadding != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(XPadding);
          }
          if (YPadding != 0) {
            size += 1 + pb::CodedOutputStream.ComputeSInt32Size(YPadding);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CharacterEntry other) {
          if (other == null) {
            return;
          }
          if (other.CharacterIndex != 0) {
            CharacterIndex = other.CharacterIndex;
          }
          if (other.CharacterVal.Length != 0) {
            CharacterVal = other.CharacterVal;
          }
          if (other.XPadding != 0) {
            XPadding = other.XPadding;
          }
          if (other.YPadding != 0) {
            YPadding = other.YPadding;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CharacterIndex = input.ReadUInt32();
                break;
              }
              case 18: {
                CharacterVal = input.ReadString();
                break;
              }
              case 24: {
                XPadding = input.ReadSInt32();
                break;
              }
              case 32: {
                YPadding = input.ReadSInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class AdditionalOffsetEntry : pb::IMessage<AdditionalOffsetEntry> {
        private static readonly pb::MessageParser<AdditionalOffsetEntry> _parser = new pb::MessageParser<AdditionalOffsetEntry>(() => new AdditionalOffsetEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AdditionalOffsetEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::LiveSplit.Lazysplits.Proto.WatchInfo.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AdditionalOffsetEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AdditionalOffsetEntry(AdditionalOffsetEntry other) : this() {
          characterLengthThreshold_ = other.characterLengthThreshold_;
          Offset = other.offset_ != null ? other.Offset.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AdditionalOffsetEntry Clone() {
          return new AdditionalOffsetEntry(this);
        }

        /// <summary>Field number for the "character_length_threshold" field.</summary>
        public const int CharacterLengthThresholdFieldNumber = 1;
        private uint characterLengthThreshold_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CharacterLengthThreshold {
          get { return characterLengthThreshold_; }
          set {
            characterLengthThreshold_ = value;
          }
        }

        /// <summary>Field number for the "offset" field.</summary>
        public const int OffsetFieldNumber = 2;
        private global::LiveSplit.Lazysplits.Proto.UScalar2d offset_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::LiveSplit.Lazysplits.Proto.UScalar2d Offset {
          get { return offset_; }
          set {
            offset_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AdditionalOffsetEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AdditionalOffsetEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CharacterLengthThreshold != other.CharacterLengthThreshold) return false;
          if (!object.Equals(Offset, other.Offset)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CharacterLengthThreshold != 0) hash ^= CharacterLengthThreshold.GetHashCode();
          if (offset_ != null) hash ^= Offset.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CharacterLengthThreshold != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(CharacterLengthThreshold);
          }
          if (offset_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Offset);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CharacterLengthThreshold != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CharacterLengthThreshold);
          }
          if (offset_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AdditionalOffsetEntry other) {
          if (other == null) {
            return;
          }
          if (other.CharacterLengthThreshold != 0) {
            CharacterLengthThreshold = other.CharacterLengthThreshold;
          }
          if (other.offset_ != null) {
            if (offset_ == null) {
              offset_ = new global::LiveSplit.Lazysplits.Proto.UScalar2d();
            }
            Offset.MergeFrom(other.Offset);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                CharacterLengthThreshold = input.ReadUInt32();
                break;
              }
              case 18: {
                if (offset_ == null) {
                  offset_ = new global::LiveSplit.Lazysplits.Proto.UScalar2d();
                }
                input.ReadMessage(offset_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
